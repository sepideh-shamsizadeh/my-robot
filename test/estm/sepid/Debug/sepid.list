
sepid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006498  08006498  00007498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a0  080064a0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080064a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  2000000c  080064b4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080064b4  00008560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010713  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a93  00000000  00000000  0001874f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0001b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0a  00000000  00000000  0001bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d9d  00000000  00000000  0001c92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef8  00000000  00000000  0003f6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf95  00000000  00000000  000505bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c554  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003608  00000000  00000000  0011c598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0011fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006468 	.word	0x08006468

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08006468 	.word	0x08006468

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b2d      	ldr	r3, [pc, #180]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a2c      	ldr	r2, [pc, #176]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a25      	ldr	r2, [pc, #148]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b23      	ldr	r3, [pc, #140]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a1e      	ldr	r2, [pc, #120]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a17      	ldr	r2, [pc, #92]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b15      	ldr	r3, [pc, #84]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	4812      	ldr	r0, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000580:	f000 fda8 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_GPIO_Init+0xd8>)
 800059c:	f000 fc06 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005a0:	2320      	movs	r3, #32
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 80005b8:	f000 fbf8 	bl	8000dac <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020800 	.word	0x40020800

080005d0 <HAL_UART_RxCpltCallback>:
#include "usb_device.h"
#include "gpio.h"

uint8_t receivedData;  // Global variable for UART data

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Ensure the callback is for USART2
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0f      	ldr	r2, [pc, #60]	@ (800061c <HAL_UART_RxCpltCallback+0x4c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d117      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x42>
        if (receivedData == '1') {
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <HAL_UART_RxCpltCallback+0x50>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b31      	cmp	r3, #49	@ 0x31
 80005e8:	d105      	bne.n	80005f6 <HAL_UART_RxCpltCallback+0x26>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Turn on LED
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <HAL_UART_RxCpltCallback+0x54>)
 80005f0:	f000 fd70 	bl	80010d4 <HAL_GPIO_WritePin>
 80005f4:	e008      	b.n	8000608 <HAL_UART_RxCpltCallback+0x38>
        } else if (receivedData == '0') {
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <HAL_UART_RxCpltCallback+0x50>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b30      	cmp	r3, #48	@ 0x30
 80005fc:	d104      	bne.n	8000608 <HAL_UART_RxCpltCallback+0x38>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Turn off LED
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	4808      	ldr	r0, [pc, #32]	@ (8000624 <HAL_UART_RxCpltCallback+0x54>)
 8000604:	f000 fd66 	bl	80010d4 <HAL_GPIO_WritePin>
        }
        HAL_UART_Receive_IT(&huart2, &receivedData, 1);  // Re-enable UART interrupt
 8000608:	2201      	movs	r2, #1
 800060a:	4905      	ldr	r1, [pc, #20]	@ (8000620 <HAL_UART_RxCpltCallback+0x50>)
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <HAL_UART_RxCpltCallback+0x58>)
 800060e:	f002 fc27 	bl	8002e60 <HAL_UART_Receive_IT>
    }
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40004400 	.word	0x40004400
 8000620:	20000028 	.word	0x20000028
 8000624:	40020000 	.word	0x40020000
 8000628:	2000002c 	.word	0x2000002c

0800062c <main>:

int main(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000630:	f000 f9a6 	bl	8000980 <HAL_Init>
    SystemClock_Config();
 8000634:	f000 f810 	bl	8000658 <SystemClock_Config>
    MX_GPIO_Init();
 8000638:	f7ff ff5c 	bl	80004f4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800063c:	f000 f8fc 	bl	8000838 <MX_USART2_UART_Init>

    HAL_UART_Receive_IT(&huart2, &receivedData, 1);  // Start UART interrupt
 8000640:	2201      	movs	r2, #1
 8000642:	4903      	ldr	r1, [pc, #12]	@ (8000650 <main+0x24>)
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <main+0x28>)
 8000646:	f002 fc0b 	bl	8002e60 <HAL_UART_Receive_IT>

    while (1) {
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x1e>
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	2000002c 	.word	0x2000002c

08000658 <SystemClock_Config>:
        // Main loop does nothing; all functionality is interrupt-driven
    }
}

void SystemClock_Config(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fed2 	bl	8006410 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a28      	ldr	r2, [pc, #160]	@ (8000728 <SystemClock_Config+0xd0>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b23      	ldr	r3, [pc, #140]	@ (800072c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd4>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 72;
 80006d0:	2348      	movs	r3, #72	@ 0x48
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 3;
 80006d8:	2303      	movs	r3, #3
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f8cd 	bl	8002884 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x9c>
        Error_Handler();
 80006f0:	f000 f81e 	bl	8000730 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000704:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2102      	movs	r1, #2
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fd6d 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc8>
        Error_Handler();
 800071c:	f000 f808 	bl	8000730 <Error_Handler>
    }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	@ 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <Error_Handler>:

void Error_Handler(void) {
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
    __disable_irq();
    while (1) {}
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <Error_Handler+0x8>

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074a:	4a0f      	ldr	r2, [pc, #60]	@ (8000788 <HAL_MspInit+0x4c>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000750:	6453      	str	r3, [r2, #68]	@ 0x44
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	@ 0x40
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800077a:	2007      	movs	r0, #7
 800077c:	f000 fa42 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 f91f 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007f0:	4802      	ldr	r0, [pc, #8]	@ (80007fc <USART2_IRQHandler+0x10>)
 80007f2:	f002 fb5b 	bl	8002eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000002c 	.word	0x2000002c

08000800 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <OTG_FS_IRQHandler+0x10>)
 8000806:	f000 fc7e 	bl	8001106 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000007c 	.word	0x2000007c

08000814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <SystemInit+0x20>)
 800081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800081e:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <SystemInit+0x20>)
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f002 faa6 	bl	8002dc0 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f7ff ff59 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000002c 	.word	0x2000002c
 8000888:	40004400 	.word	0x40004400

0800088c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <HAL_UART_MspInit+0x94>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d133      	bne.n	8000916 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_UART_MspInit+0x98>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <HAL_UART_MspInit+0x98>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_UART_MspInit+0x98>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <HAL_UART_MspInit+0x98>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_UART_MspInit+0x98>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <HAL_UART_MspInit+0x9c>)
 8000902:	f000 fa53 	bl	8000dac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2026      	movs	r0, #38	@ 0x26
 800090c:	f000 f985 	bl	8000c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000910:	2026      	movs	r0, #38	@ 0x26
 8000912:	f000 f99e 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000930:	f7ff ff70 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800095a:	f005 fd61 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fe65 	bl	800062c <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000970:	080064a8 	.word	0x080064a8
  ldr r2, =_sbss
 8000974:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000978:	20000560 	.word	0x20000560

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f92b 	bl	8000c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fec2 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f943 	bl	8000c6e <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a00:	f000 f90b 	bl	8000c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	@ (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000074 	.word	0x20000074

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000074 	.word	0x20000074

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	@ (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	@ (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00f      	b.n	8000bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <SysTick_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bde:	210f      	movs	r1, #15
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be4:	f7ff ff8e 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <SysTick_Config+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <SysTick_Config+0x40>)
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ff29 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2c:	f7ff ff3e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	6978      	ldr	r0, [r7, #20]
 8000c38:	f7ff ff8e 	bl	8000b58 <NVIC_EncodePriority>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff31 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffa2 	bl	8000bc0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff feda 	bl	8000a4c <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d008      	beq.n	8000cb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2280      	movs	r2, #128	@ 0x80
 8000caa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e052      	b.n	8000d5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0216 	bic.w	r2, r2, #22
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d103      	bne.n	8000ce8 <HAL_DMA_Abort+0x62>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0208 	bic.w	r2, r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0201 	bic.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d08:	e013      	b.n	8000d32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d0a:	f7ff fe9f 	bl	8000a4c <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d90c      	bls.n	8000d32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e015      	b.n	8000d5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e4      	bne.n	8000d0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d44:	223f      	movs	r2, #63	@ 0x3f
 8000d46:	409a      	lsls	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d004      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00c      	b.n	8000d9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2205      	movs	r2, #5
 8000d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e165      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8154 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d005      	beq.n	8000dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d017      	beq.n	8000e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80ae 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5d      	ldr	r3, [pc, #372]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b5a      	ldr	r3, [pc, #360]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a58      	ldr	r2, [pc, #352]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	@ (80010b4 <HAL_GPIO_Init+0x308>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	@ (80010bc <HAL_GPIO_Init+0x310>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_GPIO_Init+0x314>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	@ (80010c4 <HAL_GPIO_Init+0x318>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x206>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	@ (80010cc <HAL_GPIO_Init+0x320>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x202>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a31      	ldr	r2, [pc, #196]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f ae96 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001106:	b590      	push	{r4, r7, lr}
 8001108:	b08d      	sub	sp, #52	@ 0x34
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fcae 	bl	8004a7e <USB_GetMode>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 84b9 	bne.w	8001a9c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fc12 	bl	8004958 <USB_ReadInterrupts>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 84af 	beq.w	8001a9a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fbff 	bl	8004958 <USB_ReadInterrupts>
 800115a:	4603      	mov	r3, r0
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	d107      	bne.n	8001174 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f002 0202 	and.w	r2, r2, #2
 8001172:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fbed 	bl	8004958 <USB_ReadInterrupts>
 800117e:	4603      	mov	r3, r0
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b10      	cmp	r3, #16
 8001186:	d161      	bne.n	800124c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0210 	bic.w	r2, r2, #16
 8001196:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f003 020f 	and.w	r2, r3, #15
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	0c5b      	lsrs	r3, r3, #17
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d124      	bne.n	800120e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d035      	beq.n	800123c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011de:	b29b      	uxth	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	6a38      	ldr	r0, [r7, #32]
 80011e4:	f003 fa66 	bl	80046b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f4:	441a      	add	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001206:	441a      	add	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	e016      	b.n	800123c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	0c5b      	lsrs	r3, r3, #17
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	2b06      	cmp	r3, #6
 8001218:	d110      	bne.n	800123c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001220:	2208      	movs	r2, #8
 8001222:	4619      	mov	r1, r3
 8001224:	6a38      	ldr	r0, [r7, #32]
 8001226:	f003 fa45 	bl	80046b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001236:	441a      	add	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0210 	orr.w	r2, r2, #16
 800124a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fb81 	bl	8004958 <USB_ReadInterrupts>
 8001256:	4603      	mov	r3, r0
 8001258:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800125c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001260:	f040 80a7 	bne.w	80013b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fb86 	bl	800497e <USB_ReadDevAllOutEpInterrupt>
 8001272:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001274:	e099      	b.n	80013aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 808e 	beq.w	800139e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fbaa 	bl	80049e6 <USB_ReadDevOutEPInterrupt>
 8001292:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00c      	beq.n	80012b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012aa:	461a      	mov	r2, r3
 80012ac:	2301      	movs	r3, #1
 80012ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fe6e 	bl	8001f94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012ce:	461a      	mov	r2, r3
 80012d0:	2308      	movs	r3, #8
 80012d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 ff44 	bl	8002164 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d008      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	015a      	lsls	r2, r3, #5
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	4413      	add	r3, r2
 80012ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012f2:	461a      	mov	r2, r3
 80012f4:	2310      	movs	r3, #16
 80012f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d030      	beq.n	8001364 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130a:	2b80      	cmp	r3, #128	@ 0x80
 800130c:	d109      	bne.n	8001322 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800131c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001320:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	3304      	adds	r3, #4
 8001336:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	78db      	ldrb	r3, [r3, #3]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2200      	movs	r2, #0
 8001344:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f004 feb3 	bl	80060b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800135e:	461a      	mov	r2, r3
 8001360:	2302      	movs	r3, #2
 8001362:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	4413      	add	r3, r2
 8001376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800137a:	461a      	mov	r2, r3
 800137c:	2320      	movs	r3, #32
 800137e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001396:	461a      	mov	r2, r3
 8001398:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80013aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f47f af62 	bne.w	8001276 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 face 	bl	8004958 <USB_ReadInterrupts>
 80013bc:	4603      	mov	r3, r0
 80013be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013c6:	f040 80db 	bne.w	8001580 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 faef 	bl	80049b2 <USB_ReadDevAllInEpInterrupt>
 80013d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80013da:	e0cd      	b.n	8001578 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80c2 	beq.w	800156c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fb15 	bl	8004a22 <USB_ReadDevInEPInterrupt>
 80013f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d057      	beq.n	80014b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	2201      	movs	r2, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	69f9      	ldr	r1, [r7, #28]
 8001420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001424:	4013      	ands	r3, r2
 8001426:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001434:	461a      	mov	r2, r3
 8001436:	2301      	movs	r3, #1
 8001438:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	799b      	ldrb	r3, [r3, #6]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d132      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3320      	adds	r3, #32
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4403      	add	r3, r0
 8001462:	331c      	adds	r3, #28
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4419      	add	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4403      	add	r3, r0
 8001476:	3320      	adds	r3, #32
 8001478:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	2b00      	cmp	r3, #0
 800147e:	d113      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x3a2>
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3324      	adds	r3, #36	@ 0x24
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d108      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80014a0:	461a      	mov	r2, r3
 80014a2:	2101      	movs	r1, #1
 80014a4:	f003 fb1c 	bl	8004ae0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f004 fd7e 	bl	8005fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014ca:	461a      	mov	r2, r3
 80014cc:	2308      	movs	r3, #8
 80014ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014e6:	461a      	mov	r2, r3
 80014e8:	2310      	movs	r3, #16
 80014ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001502:	461a      	mov	r2, r3
 8001504:	2340      	movs	r3, #64	@ 0x40
 8001506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d023      	beq.n	800155a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001514:	6a38      	ldr	r0, [r7, #32]
 8001516:	f002 fc69 	bl	8003dec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	3310      	adds	r3, #16
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	3304      	adds	r3, #4
 800152c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	78db      	ldrb	r3, [r3, #3]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d108      	bne.n	8001548 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2200      	movs	r2, #0
 800153a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f004 fdca 	bl	80060dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001554:	461a      	mov	r2, r3
 8001556:	2302      	movs	r3, #2
 8001558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fc88 	bl	8001e7c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	3301      	adds	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f af2e 	bne.w	80013dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f003 f9e7 	bl	8004958 <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001594:	d122      	bne.n	80015dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015bc:	2100      	movs	r1, #0
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f004 feac 	bl	800631c <HAL_PCDEx_LPM_Callback>
 80015c4:	e002      	b.n	80015cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f004 fd68 	bl	800609c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80015da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 f9b9 	bl	8004958 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015f0:	d112      	bne.n	8001618 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d102      	bne.n	8001608 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f004 fd24 	bl	8006050 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001616:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f99b 	bl	8004958 <USB_ReadInterrupts>
 8001622:	4603      	mov	r3, r0
 8001624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800162c:	d121      	bne.n	8001672 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800163c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	f003 020f 	and.w	r2, r3, #15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001662:	2101      	movs	r1, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f004 fe59 	bl	800631c <HAL_PCDEx_LPM_Callback>
 800166a:	e002      	b.n	8001672 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f004 fcef 	bl	8006050 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 f96e 	bl	8004958 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001686:	f040 80b7 	bne.w	80017f8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2110      	movs	r1, #16
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fba1 	bl	8003dec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ae:	e046      	b.n	800173e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016bc:	461a      	mov	r2, r3
 80016be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d4:	0151      	lsls	r1, r2, #5
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	440a      	add	r2, r1
 80016da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e6:	015a      	lsls	r2, r3, #5
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f0:	461a      	mov	r2, r3
 80016f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001708:	0151      	lsls	r1, r2, #5
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	440a      	add	r2, r1
 800170e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001728:	0151      	lsls	r1, r2, #5
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	440a      	add	r2, r1
 800172e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001732:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001736:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	3301      	adds	r3, #1
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	791b      	ldrb	r3, [r3, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001746:	4293      	cmp	r3, r2
 8001748:	d3b2      	bcc.n	80016b0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001758:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800175c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7bdb      	ldrb	r3, [r3, #15]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d016      	beq.n	8001794 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001776:	f043 030b 	orr.w	r3, r3, #11
 800177a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800178c:	f043 030b 	orr.w	r3, r3, #11
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	e015      	b.n	80017c0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017a6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80017aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ba:	f043 030b 	orr.w	r3, r3, #11
 80017be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017e2:	461a      	mov	r2, r3
 80017e4:	f003 f97c 	bl	8004ae0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80017f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f8ab 	bl	8004958 <USB_ReadInterrupts>
 8001802:	4603      	mov	r3, r0
 8001804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800180c:	d123      	bne.n	8001856 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f003 f941 	bl	8004a9a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fb17 	bl	8003e50 <USB_GetDevSpeed>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681c      	ldr	r4, [r3, #0]
 800182e:	f000 fdc5 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8001832:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001838:	461a      	mov	r2, r3
 800183a:	4620      	mov	r0, r4
 800183c:	f002 fa34 	bl	8003ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f004 fbdd 	bl	8006000 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f87c 	bl	8004958 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b08      	cmp	r3, #8
 8001868:	d10a      	bne.n	8001880 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 fbba 	bl	8005fe4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f002 0208 	and.w	r2, r2, #8
 800187e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 f867 	bl	8004958 <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001890:	2b80      	cmp	r3, #128	@ 0x80
 8001892:	d123      	bne.n	80018dc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a4:	e014      	b.n	80018d0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d105      	bne.n	80018ca <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 faa8 	bl	8001e1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	3301      	adds	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	461a      	mov	r2, r3
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	4293      	cmp	r3, r2
 80018da:	d3e4      	bcc.n	80018a6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 f839 	bl	8004958 <USB_ReadInterrupts>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018f0:	d13c      	bne.n	800196c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f2:	2301      	movs	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f6:	e02b      	b.n	8001950 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3318      	adds	r3, #24
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d115      	bne.n	800194a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800191e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	da12      	bge.n	800194a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3317      	adds	r3, #23
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fa68 	bl	8001e1a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	791b      	ldrb	r3, [r3, #4]
 8001954:	461a      	mov	r2, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	4293      	cmp	r3, r2
 800195a:	d3cd      	bcc.n	80018f8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fff1 	bl	8004958 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001980:	d156      	bne.n	8001a30 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001982:	2301      	movs	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
 8001986:	e045      	b.n	8001a14 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d12e      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da2b      	bge.n	8001a0e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d121      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0a:	6053      	str	r3, [r2, #4]
            break;
 8001a0c:	e008      	b.n	8001a20 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	791b      	ldrb	r3, [r3, #4]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d3b3      	bcc.n	8001988 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 ff8f 	bl	8004958 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a44:	d10a      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f004 fb5a 	bl	8006100 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 ff79 	bl	8004958 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d115      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f004 fb4a 	bl	800611c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	e000      	b.n	8001a9c <HAL_PCD_IRQHandler+0x996>
      return;
 8001a9a:	bf00      	nop
    }
  }
}
 8001a9c:	3734      	adds	r7, #52	@ 0x34
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}

08001aa2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_SetAddress+0x1a>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e012      	b.n	8001ae2 <HAL_PCD_SetAddress+0x40>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 ff1a 	bl	800490c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	4608      	mov	r0, r1
 8001af4:	4611      	mov	r1, r2
 8001af6:	461a      	mov	r2, r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	70fb      	strb	r3, [r7, #3]
 8001afc:	460b      	mov	r3, r1
 8001afe:	803b      	strh	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da0f      	bge.n	8001b30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3310      	adds	r3, #16
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	705a      	strb	r2, [r3, #1]
 8001b2e:	e00f      	b.n	8001b50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 020f 	and.w	r2, r3, #15
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b5c:	883b      	ldrh	r3, [r7, #0]
 8001b5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	78ba      	ldrb	r2, [r7, #2]
 8001b6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b7e:	78bb      	ldrb	r3, [r7, #2]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d102      	bne.n	8001b8a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_EP_Open+0xae>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e00e      	b.n	8001bb6 <HAL_PCD_EP_Open+0xcc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 f977 	bl	8003e9a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 020f 	and.w	r2, r3, #15
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c00:	7afb      	ldrb	r3, [r7, #11]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	799b      	ldrb	r3, [r3, #6]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	799b      	ldrb	r3, [r3, #6]
 8001c22:	461a      	mov	r2, r3
 8001c24:	6979      	ldr	r1, [r7, #20]
 8001c26:	f002 f9bf 	bl	8003fa8 <USB_EPStartXfer>

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	460b      	mov	r3, r1
 8001c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	f003 020f 	and.w	r2, r3, #15
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	3310      	adds	r3, #16
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	3304      	adds	r3, #4
 8001c5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2201      	movs	r2, #1
 8001c72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	799b      	ldrb	r3, [r3, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	799b      	ldrb	r3, [r3, #6]
 8001c96:	461a      	mov	r2, r3
 8001c98:	6979      	ldr	r1, [r7, #20]
 8001c9a:	f002 f985 	bl	8003fa8 <USB_EPStartXfer>

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	7912      	ldrb	r2, [r2, #4]
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e04f      	b.n	8001d66 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da0f      	bge.n	8001cee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3310      	adds	r3, #16
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	705a      	strb	r2, [r3, #1]
 8001cec:	e00d      	b.n	8001d0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_PCD_EP_SetStall+0x82>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e01d      	b.n	8001d66 <HAL_PCD_EP_SetStall+0xbe>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 fd13 	bl	8004764 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7999      	ldrb	r1, [r3, #6]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d56:	461a      	mov	r2, r3
 8001d58:	f002 fec2 	bl	8004ae0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	7912      	ldrb	r2, [r2, #4]
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e042      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da0f      	bge.n	8001db4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	3310      	adds	r3, #16
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	705a      	strb	r2, [r3, #1]
 8001db2:	e00f      	b.n	8001dd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	3304      	adds	r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_EP_ClrStall+0x86>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_ClrStall+0xa4>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fd1c 	bl	8004840 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0c      	bge.n	8001e48 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3310      	adds	r3, #16
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e00c      	b.n	8001e62 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fb3b 	bl	80044e4 <USB_EPStopXfer>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e72:	7afb      	ldrb	r3, [r7, #11]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	@ 0x28
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d901      	bls.n	8001eb4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e06b      	b.n	8001f8c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d902      	bls.n	8001ed0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed8:	e02a      	b.n	8001f30 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d902      	bls.n	8001ef6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3303      	adds	r3, #3
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	68d9      	ldr	r1, [r3, #12]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4603      	mov	r3, r0
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f002 fb90 	bl	8004638 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d809      	bhi.n	8001f5a <PCD_WriteEmptyTxFifo+0xde>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d203      	bcs.n	8001f5a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1bf      	bne.n	8001eda <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d811      	bhi.n	8001f8a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f86:	4013      	ands	r3, r2
 8001f88:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	333c      	adds	r3, #60	@ 0x3c
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	799b      	ldrb	r3, [r3, #6]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d17b      	bne.n	80020c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4a61      	ldr	r2, [pc, #388]	@ (800215c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	f240 80b9 	bls.w	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80b3 	beq.w	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ffc:	6093      	str	r3, [r2, #8]
 8001ffe:	e0a7      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002016:	461a      	mov	r2, r3
 8002018:	2320      	movs	r3, #32
 800201a:	6093      	str	r3, [r2, #8]
 800201c:	e098      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002024:	2b00      	cmp	r3, #0
 8002026:	f040 8093 	bne.w	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	4a4b      	ldr	r2, [pc, #300]	@ (800215c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d90f      	bls.n	8002052 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	e07e      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	0159      	lsls	r1, r3, #5
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	440b      	add	r3, r1
 8002074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	1ad2      	subs	r2, r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d114      	bne.n	80020b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800209c:	461a      	mov	r2, r3
 800209e:	2101      	movs	r1, #1
 80020a0:	f002 fd1e 	bl	8004ae0 <USB_EP0_OutStart>
 80020a4:	e006      	b.n	80020b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	441a      	add	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f003 ff5d 	bl	8005f7a <HAL_PCD_DataOutStageCallback>
 80020c0:	e046      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4a26      	ldr	r2, [pc, #152]	@ (8002160 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d124      	bne.n	8002114 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020e0:	461a      	mov	r2, r3
 80020e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020e6:	6093      	str	r3, [r2, #8]
 80020e8:	e032      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002100:	461a      	mov	r2, r3
 8002102:	2320      	movs	r3, #32
 8002104:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f003 ff34 	bl	8005f7a <HAL_PCD_DataOutStageCallback>
 8002112:	e01d      	b.n	8002150 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d114      	bne.n	8002144 <PCD_EP_OutXfrComplete_int+0x1b0>
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800213c:	461a      	mov	r2, r3
 800213e:	2100      	movs	r1, #0
 8002140:	f002 fcce 	bl	8004ae0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f003 ff15 	bl	8005f7a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	4f54300a 	.word	0x4f54300a
 8002160:	4f54310a 	.word	0x4f54310a

08002164 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	333c      	adds	r3, #60	@ 0x3c
 800217c:	3304      	adds	r3, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <PCD_EP_OutSetupPacket_int+0x88>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d90e      	bls.n	80021b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f003 fecc 	bl	8005f56 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <PCD_EP_OutSetupPacket_int+0x88>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d90c      	bls.n	80021e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	799b      	ldrb	r3, [r3, #6]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021d8:	461a      	mov	r2, r3
 80021da:	2101      	movs	r1, #1
 80021dc:	f002 fc80 	bl	8004ae0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	4f54300a 	.word	0x4f54300a

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fbb4 	bl	8000a4c <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fbb0 	bl	8000a4c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f855 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fb14 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08006480 	.word	0x08006480
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	@ (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08006490 	.word	0x08006490

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002400:	f7ff ffdc 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0b5b      	lsrs	r3, r3, #13
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	08006490 	.word	0x08006490

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002428:	b0ae      	sub	sp, #184	@ 0xb8
 800242a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800244a:	4bcb      	ldr	r3, [pc, #812]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b0c      	cmp	r3, #12
 8002454:	f200 8206 	bhi.w	8002864 <HAL_RCC_GetSysClockFreq+0x440>
 8002458:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <HAL_RCC_GetSysClockFreq+0x3c>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002495 	.word	0x08002495
 8002464:	08002865 	.word	0x08002865
 8002468:	08002865 	.word	0x08002865
 800246c:	08002865 	.word	0x08002865
 8002470:	0800249d 	.word	0x0800249d
 8002474:	08002865 	.word	0x08002865
 8002478:	08002865 	.word	0x08002865
 800247c:	08002865 	.word	0x08002865
 8002480:	080024a5 	.word	0x080024a5
 8002484:	08002865 	.word	0x08002865
 8002488:	08002865 	.word	0x08002865
 800248c:	08002865 	.word	0x08002865
 8002490:	08002695 	.word	0x08002695
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4bb9      	ldr	r3, [pc, #740]	@ (800277c <HAL_RCC_GetSysClockFreq+0x358>)
 8002496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800249a:	e1e7      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249c:	4bb8      	ldr	r3, [pc, #736]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x35c>)
 800249e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024a2:	e1e3      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a4:	4bb4      	ldr	r3, [pc, #720]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d071      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	4bae      	ldr	r3, [pc, #696]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80024cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024e2:	4622      	mov	r2, r4
 80024e4:	462b      	mov	r3, r5
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	0159      	lsls	r1, r3, #5
 80024f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f4:	0150      	lsls	r0, r2, #5
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4621      	mov	r1, r4
 80024fc:	1a51      	subs	r1, r2, r1
 80024fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002500:	4629      	mov	r1, r5
 8002502:	eb63 0301 	sbc.w	r3, r3, r1
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002514:	4649      	mov	r1, r9
 8002516:	018b      	lsls	r3, r1, #6
 8002518:	4641      	mov	r1, r8
 800251a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800251e:	4641      	mov	r1, r8
 8002520:	018a      	lsls	r2, r1, #6
 8002522:	4641      	mov	r1, r8
 8002524:	1a51      	subs	r1, r2, r1
 8002526:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002528:	4649      	mov	r1, r9
 800252a:	eb63 0301 	sbc.w	r3, r3, r1
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800253c:	4649      	mov	r1, r9
 800253e:	00cb      	lsls	r3, r1, #3
 8002540:	4641      	mov	r1, r8
 8002542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002546:	4641      	mov	r1, r8
 8002548:	00ca      	lsls	r2, r1, #3
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	4603      	mov	r3, r0
 8002550:	4622      	mov	r2, r4
 8002552:	189b      	adds	r3, r3, r2
 8002554:	633b      	str	r3, [r7, #48]	@ 0x30
 8002556:	462b      	mov	r3, r5
 8002558:	460a      	mov	r2, r1
 800255a:	eb42 0303 	adc.w	r3, r2, r3
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800256c:	4629      	mov	r1, r5
 800256e:	024b      	lsls	r3, r1, #9
 8002570:	4621      	mov	r1, r4
 8002572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002576:	4621      	mov	r1, r4
 8002578:	024a      	lsls	r2, r1, #9
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002588:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800258c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002590:	f7fd fe38 	bl	8000204 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800259e:	e067      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a0:	4b75      	ldr	r3, [pc, #468]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80025b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025ba:	2300      	movs	r3, #0
 80025bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80025c2:	4622      	mov	r2, r4
 80025c4:	462b      	mov	r3, r5
 80025c6:	f04f 0000 	mov.w	r0, #0
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	0159      	lsls	r1, r3, #5
 80025d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d4:	0150      	lsls	r0, r2, #5
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4621      	mov	r1, r4
 80025dc:	1a51      	subs	r1, r2, r1
 80025de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025e0:	4629      	mov	r1, r5
 80025e2:	eb63 0301 	sbc.w	r3, r3, r1
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025f4:	4649      	mov	r1, r9
 80025f6:	018b      	lsls	r3, r1, #6
 80025f8:	4641      	mov	r1, r8
 80025fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fe:	4641      	mov	r1, r8
 8002600:	018a      	lsls	r2, r1, #6
 8002602:	4641      	mov	r1, r8
 8002604:	ebb2 0a01 	subs.w	sl, r2, r1
 8002608:	4649      	mov	r1, r9
 800260a:	eb63 0b01 	sbc.w	fp, r3, r1
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800261a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800261e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002622:	4692      	mov	sl, r2
 8002624:	469b      	mov	fp, r3
 8002626:	4623      	mov	r3, r4
 8002628:	eb1a 0303 	adds.w	r3, sl, r3
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	462b      	mov	r3, r5
 8002630:	eb4b 0303 	adc.w	r3, fp, r3
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002642:	4629      	mov	r1, r5
 8002644:	028b      	lsls	r3, r1, #10
 8002646:	4621      	mov	r1, r4
 8002648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800264c:	4621      	mov	r1, r4
 800264e:	028a      	lsls	r2, r1, #10
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002658:	2200      	movs	r2, #0
 800265a:	673b      	str	r3, [r7, #112]	@ 0x70
 800265c:	677a      	str	r2, [r7, #116]	@ 0x74
 800265e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002662:	f7fd fdcf 	bl	8000204 <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4613      	mov	r3, r2
 800266c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002670:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002692:	e0eb      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002694:	4b38      	ldr	r3, [pc, #224]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800269c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a0:	4b35      	ldr	r3, [pc, #212]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d06b      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ac:	4b32      	ldr	r3, [pc, #200]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	2200      	movs	r2, #0
 80026b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	663b      	str	r3, [r7, #96]	@ 0x60
 80026c0:	2300      	movs	r3, #0
 80026c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80026c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80026c8:	4622      	mov	r2, r4
 80026ca:	462b      	mov	r3, r5
 80026cc:	f04f 0000 	mov.w	r0, #0
 80026d0:	f04f 0100 	mov.w	r1, #0
 80026d4:	0159      	lsls	r1, r3, #5
 80026d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026da:	0150      	lsls	r0, r2, #5
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4621      	mov	r1, r4
 80026e2:	1a51      	subs	r1, r2, r1
 80026e4:	61b9      	str	r1, [r7, #24]
 80026e6:	4629      	mov	r1, r5
 80026e8:	eb63 0301 	sbc.w	r3, r3, r1
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026fa:	4659      	mov	r1, fp
 80026fc:	018b      	lsls	r3, r1, #6
 80026fe:	4651      	mov	r1, sl
 8002700:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002704:	4651      	mov	r1, sl
 8002706:	018a      	lsls	r2, r1, #6
 8002708:	4651      	mov	r1, sl
 800270a:	ebb2 0801 	subs.w	r8, r2, r1
 800270e:	4659      	mov	r1, fp
 8002710:	eb63 0901 	sbc.w	r9, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002728:	4690      	mov	r8, r2
 800272a:	4699      	mov	r9, r3
 800272c:	4623      	mov	r3, r4
 800272e:	eb18 0303 	adds.w	r3, r8, r3
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	462b      	mov	r3, r5
 8002736:	eb49 0303 	adc.w	r3, r9, r3
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002748:	4629      	mov	r1, r5
 800274a:	024b      	lsls	r3, r1, #9
 800274c:	4621      	mov	r1, r4
 800274e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002752:	4621      	mov	r1, r4
 8002754:	024a      	lsls	r2, r1, #9
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800275e:	2200      	movs	r2, #0
 8002760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002762:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002768:	f7fd fd4c 	bl	8000204 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002776:	e065      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x420>
 8002778:	40023800 	.word	0x40023800
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <HAL_RCC_GetSysClockFreq+0x458>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	2200      	movs	r2, #0
 800278c:	4618      	mov	r0, r3
 800278e:	4611      	mov	r1, r2
 8002790:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002794:	653b      	str	r3, [r7, #80]	@ 0x50
 8002796:	2300      	movs	r3, #0
 8002798:	657b      	str	r3, [r7, #84]	@ 0x54
 800279a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800279e:	4642      	mov	r2, r8
 80027a0:	464b      	mov	r3, r9
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b0:	0150      	lsls	r0, r2, #5
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4641      	mov	r1, r8
 80027b8:	1a51      	subs	r1, r2, r1
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	4649      	mov	r1, r9
 80027be:	eb63 0301 	sbc.w	r3, r3, r1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027d0:	4659      	mov	r1, fp
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027da:	4651      	mov	r1, sl
 80027dc:	018a      	lsls	r2, r1, #6
 80027de:	4651      	mov	r1, sl
 80027e0:	1a54      	subs	r4, r2, r1
 80027e2:	4659      	mov	r1, fp
 80027e4:	eb63 0501 	sbc.w	r5, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	00eb      	lsls	r3, r5, #3
 80027f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f6:	00e2      	lsls	r2, r4, #3
 80027f8:	4614      	mov	r4, r2
 80027fa:	461d      	mov	r5, r3
 80027fc:	4643      	mov	r3, r8
 80027fe:	18e3      	adds	r3, r4, r3
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	464b      	mov	r3, r9
 8002804:	eb45 0303 	adc.w	r3, r5, r3
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002816:	4629      	mov	r1, r5
 8002818:	028b      	lsls	r3, r1, #10
 800281a:	4621      	mov	r1, r4
 800281c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002820:	4621      	mov	r1, r4
 8002822:	028a      	lsls	r2, r1, #10
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800282c:	2200      	movs	r2, #0
 800282e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002830:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002836:	f7fd fce5 	bl	8000204 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4613      	mov	r3, r2
 8002840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002844:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <HAL_RCC_GetSysClockFreq+0x458>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0f1b      	lsrs	r3, r3, #28
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002852:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002862:	e003      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800286a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002870:	4618      	mov	r0, r3
 8002872:	37b8      	adds	r7, #184	@ 0xb8
 8002874:	46bd      	mov	sp, r7
 8002876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	00f42400 	.word	0x00f42400

08002884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e28d      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8083 	beq.w	80029aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028a4:	4b94      	ldr	r3, [pc, #592]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d019      	beq.n	80028e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028b0:	4b91      	ldr	r3, [pc, #580]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028bc:	4b8e      	ldr	r3, [pc, #568]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c8:	d00c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b8b      	ldr	r3, [pc, #556]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d112      	bne.n	80028fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d6:	4b88      	ldr	r3, [pc, #544]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028e2:	d10b      	bne.n	80028fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	4b84      	ldr	r3, [pc, #528]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d05b      	beq.n	80029a8 <HAL_RCC_OscConfig+0x124>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d157      	bne.n	80029a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e25a      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x90>
 8002906:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7b      	ldr	r2, [pc, #492]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xcc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0xb4>
 800291e:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a72      	ldr	r2, [pc, #456]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xcc>
 8002938:	4b6f      	ldr	r3, [pc, #444]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6e      	ldr	r2, [pc, #440]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe f878 	bl	8000a4c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe f874 	bl	8000a4c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	@ 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e21f      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b61      	ldr	r3, [pc, #388]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xdc>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe f864 	bl	8000a4c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe f860 	bl	8000a4c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e20b      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b57      	ldr	r3, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x104>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d06f      	beq.n	8002a96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029b6:	4b50      	ldr	r3, [pc, #320]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d017      	beq.n	80029f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029c2:	4b4d      	ldr	r3, [pc, #308]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d105      	bne.n	80029da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029ce:	4b4a      	ldr	r3, [pc, #296]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x186>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1d3      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4937      	ldr	r1, [pc, #220]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b34      	ldr	r3, [pc, #208]	@ (8002afc <HAL_RCC_OscConfig+0x278>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe f80d 	bl	8000a4c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe f809 	bl	8000a4c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1b4      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4925      	ldr	r1, [pc, #148]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_RCC_OscConfig+0x278>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fd ffec 	bl	8000a4c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7fd ffe8 	bl	8000a4c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e193      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d036      	beq.n	8002b10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_RCC_OscConfig+0x27c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fd ffcc 	bl	8000a4c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7fd ffc8 	bl	8000a4c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e173      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x234>
 8002ad6:	e01b      	b.n	8002b10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fd ffb5 	bl	8000a4c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00e      	b.n	8002b04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fd ffb1 	bl	8000a4c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d907      	bls.n	8002b04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e15c      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470000 	.word	0x42470000
 8002b00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	4b8a      	ldr	r3, [pc, #552]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ea      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8097 	beq.w	8002c4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b83      	ldr	r3, [pc, #524]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	4b7f      	ldr	r3, [pc, #508]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	4a7e      	ldr	r2, [pc, #504]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b79      	ldr	r3, [pc, #484]	@ (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b76      	ldr	r3, [pc, #472]	@ (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a75      	ldr	r2, [pc, #468]	@ (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7fd ff71 	bl	8000a4c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7fd ff6d 	bl	8000a4c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e118      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b6c      	ldr	r3, [pc, #432]	@ (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x31e>
 8002b94:	4b66      	ldr	r3, [pc, #408]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b98:	4a65      	ldr	r2, [pc, #404]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x358>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x340>
 8002baa:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	4a60      	ldr	r2, [pc, #384]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	4a5d      	ldr	r2, [pc, #372]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x358>
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc8:	4a59      	ldr	r2, [pc, #356]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd0:	4b57      	ldr	r3, [pc, #348]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd4:	4a56      	ldr	r2, [pc, #344]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fd ff32 	bl	8000a4c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fd ff2e 	bl	8000a4c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0d7      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	4b4b      	ldr	r3, [pc, #300]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ee      	beq.n	8002bec <HAL_RCC_OscConfig+0x368>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fd ff1c 	bl	8000a4c <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fd ff18 	bl	8000a4c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0c1      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ee      	bne.n	8002c18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	4a3a      	ldr	r2, [pc, #232]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ad 	beq.w	8002db0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d060      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d145      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <HAL_RCC_OscConfig+0x4b4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fd feec 	bl	8000a4c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fd fee8 	bl	8000a4c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e093      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	4b29      	ldr	r3, [pc, #164]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	071b      	lsls	r3, r3, #28
 8002cc2:	491b      	ldr	r1, [pc, #108]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_RCC_OscConfig+0x4b4>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fd febd 	bl	8000a4c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fd feb9 	bl	8000a4c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e064      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x452>
 8002cf4:	e05c      	b.n	8002db0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <HAL_RCC_OscConfig+0x4b4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fd fea6 	bl	8000a4c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fd fea2 	bl	8000a4c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04d      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x480>
 8002d22:	e045      	b.n	8002db0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e040      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dbc <HAL_RCC_OscConfig+0x538>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d030      	beq.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d129      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d122      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d119      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d10f      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e042      	b.n	8002e58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fd50 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	@ 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fcdb 	bl	80037c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d112      	bne.n	8002ea0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_UART_Receive_IT+0x26>
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00b      	b.n	8002ea2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 faba 	bl	8003410 <UART_Start_Receive_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	e000      	b.n	8002ea2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0ba      	sub	sp, #232	@ 0xe8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_UART_IRQHandler+0x66>
 8002efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb99 	bl	8003642 <UART_Receive_IT>
      return;
 8002f10:	e25b      	b.n	80033ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80de 	beq.w	80030d8 <HAL_UART_IRQHandler+0x22c>
 8002f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80d1 	beq.w	80030d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_UART_IRQHandler+0xae>
 8002f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_UART_IRQHandler+0xd2>
 8002f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xf6>
 8002f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f043 0204 	orr.w	r2, r3, #4
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d011      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x126>
 8002fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	f043 0208 	orr.w	r2, r3, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 81f2 	beq.w	80033c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_UART_IRQHandler+0x14e>
 8002fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fb24 	bl	8003642 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_UART_IRQHandler+0x17a>
 800301e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003022:	2b00      	cmp	r3, #0
 8003024:	d04f      	beq.n	80030c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fa2c 	bl	8003484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d141      	bne.n	80030be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003050:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003066:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800306a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800307e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1d9      	bne.n	800303a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d013      	beq.n	80030b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003092:	4a7e      	ldr	r2, [pc, #504]	@ (800328c <HAL_UART_IRQHandler+0x3e0>)
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fe63 	bl	8000d66 <HAL_DMA_Abort_IT>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030b0:	4610      	mov	r0, r2
 80030b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	e00e      	b.n	80030d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f994 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	e00a      	b.n	80030d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f990 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	e006      	b.n	80030d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f98c 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030d2:	e175      	b.n	80033c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	bf00      	nop
    return;
 80030d6:	e173      	b.n	80033c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 814f 	bne.w	8003380 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8148 	beq.w	8003380 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8141 	beq.w	8003380 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311e:	2b40      	cmp	r3, #64	@ 0x40
 8003120:	f040 80b6 	bne.w	8003290 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8145 	beq.w	80033c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800313e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003142:	429a      	cmp	r2, r3
 8003144:	f080 813e 	bcs.w	80033c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800314e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800315a:	f000 8088 	beq.w	800326e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003174:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800317c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800318a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800318e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003196:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1d9      	bne.n	800315e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80031ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e1      	bne.n	80031aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3314      	adds	r3, #20
 80031ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3314      	adds	r3, #20
 8003206:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800320a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800320c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003210:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003218:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e3      	bne.n	80031e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800323c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800323e:	f023 0310 	bic.w	r3, r3, #16
 8003242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003250:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003252:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800325e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e3      	bne.n	800322c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fd0c 	bl	8000c86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800327c:	b29b      	uxth	r3, r3
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	b29b      	uxth	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8b7 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800328a:	e09b      	b.n	80033c4 <HAL_UART_IRQHandler+0x518>
 800328c:	0800354b 	.word	0x0800354b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003298:	b29b      	uxth	r3, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 808e 	beq.w	80033c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80032ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8089 	beq.w	80033c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032da:	647a      	str	r2, [r7, #68]	@ 0x44
 80032dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e3      	bne.n	80032b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	623b      	str	r3, [r7, #32]
   return(result);
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3314      	adds	r3, #20
 800330e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003312:	633a      	str	r2, [r7, #48]	@ 0x30
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e3      	bne.n	80032ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	60fb      	str	r3, [r7, #12]
   return(result);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0310 	bic.w	r3, r3, #16
 800334a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003358:	61fa      	str	r2, [r7, #28]
 800335a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	69b9      	ldr	r1, [r7, #24]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	617b      	str	r3, [r7, #20]
   return(result);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e3      	bne.n	8003334 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f83d 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800337e:	e023      	b.n	80033c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_UART_IRQHandler+0x4f4>
 800338c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8ea 	bl	8003572 <UART_Transmit_IT>
    return;
 800339e:	e014      	b.n	80033ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00e      	beq.n	80033ca <HAL_UART_IRQHandler+0x51e>
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f92a 	bl	8003612 <UART_EndTransmit_IT>
    return;
 80033be:	e004      	b.n	80033ca <HAL_UART_IRQHandler+0x51e>
    return;
 80033c0:	bf00      	nop
 80033c2:	e002      	b.n	80033ca <HAL_UART_IRQHandler+0x51e>
      return;
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <HAL_UART_IRQHandler+0x51e>
      return;
 80033c8:	bf00      	nop
  }
}
 80033ca:	37e8      	adds	r7, #232	@ 0xe8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	@ 0x22
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003454:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0220 	orr.w	r2, r2, #32
 8003474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b095      	sub	sp, #84	@ 0x54
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e5      	bne.n	800348c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3314      	adds	r3, #20
 80034c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e5      	bne.n	80034c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d119      	bne.n	8003530 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	60bb      	str	r3, [r7, #8]
   return(result);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f023 0310 	bic.w	r3, r3, #16
 8003512:	647b      	str	r3, [r7, #68]	@ 0x44
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800351c:	61ba      	str	r2, [r7, #24]
 800351e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	6979      	ldr	r1, [r7, #20]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	613b      	str	r3, [r7, #16]
   return(result);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e5      	bne.n	80034fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800353e:	bf00      	nop
 8003540:	3754      	adds	r7, #84	@ 0x54
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f7ff ff3d 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b21      	cmp	r3, #33	@ 0x21
 8003584:	d13e      	bne.n	8003604 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	d114      	bne.n	80035ba <UART_Transmit_IT+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d110      	bne.n	80035ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	1c9a      	adds	r2, r3, #2
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]
 80035b8:	e008      	b.n	80035cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	1c59      	adds	r1, r3, #1
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6211      	str	r1, [r2, #32]
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4619      	mov	r1, r3
 80035da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10f      	bne.n	8003600 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003628:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fecc 	bl	80033d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b08c      	sub	sp, #48	@ 0x30
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b22      	cmp	r3, #34	@ 0x22
 8003654:	f040 80ae 	bne.w	80037b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003660:	d117      	bne.n	8003692 <UART_Receive_IT+0x50>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	b29a      	uxth	r2, r3
 8003682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003684:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368a:	1c9a      	adds	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003690:	e026      	b.n	80036e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003698:	2300      	movs	r3, #0
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a4:	d007      	beq.n	80036b6 <UART_Receive_IT+0x74>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <UART_Receive_IT+0x82>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e008      	b.n	80036d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4619      	mov	r1, r3
 80036ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d15d      	bne.n	80037b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0220 	bic.w	r2, r2, #32
 8003702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	2b01      	cmp	r3, #1
 8003738:	d135      	bne.n	80037a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	613b      	str	r3, [r7, #16]
   return(result);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f023 0310 	bic.w	r3, r3, #16
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003760:	623a      	str	r2, [r7, #32]
 8003762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	6a3a      	ldr	r2, [r7, #32]
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	61bb      	str	r3, [r7, #24]
   return(result);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b10      	cmp	r3, #16
 8003780:	d10a      	bne.n	8003798 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fe2a 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
 80037a4:	e002      	b.n	80037ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fc ff12 	bl	80005d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e002      	b.n	80037b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e000      	b.n	80037b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3730      	adds	r7, #48	@ 0x30
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c4:	b0c0      	sub	sp, #256	@ 0x100
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	ea40 0301 	orr.w	r3, r0, r1
 80037e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	431a      	orrs	r2, r3
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003818:	f021 010c 	bic.w	r1, r1, #12
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003826:	430b      	orrs	r3, r1
 8003828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	6999      	ldr	r1, [r3, #24]
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	ea40 0301 	orr.w	r3, r0, r1
 8003846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b8f      	ldr	r3, [pc, #572]	@ (8003a8c <UART_SetConfig+0x2cc>)
 8003850:	429a      	cmp	r2, r3
 8003852:	d005      	beq.n	8003860 <UART_SetConfig+0xa0>
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a90 <UART_SetConfig+0x2d0>)
 800385c:	429a      	cmp	r2, r3
 800385e:	d104      	bne.n	800386a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003860:	f7fe fdcc 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8003864:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003868:	e003      	b.n	8003872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800386a:	f7fe fdb3 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 800386e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800387c:	f040 810c 	bne.w	8003a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003884:	2200      	movs	r2, #0
 8003886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800388a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800388e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003892:	4622      	mov	r2, r4
 8003894:	462b      	mov	r3, r5
 8003896:	1891      	adds	r1, r2, r2
 8003898:	65b9      	str	r1, [r7, #88]	@ 0x58
 800389a:	415b      	adcs	r3, r3
 800389c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800389e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038a2:	4621      	mov	r1, r4
 80038a4:	eb12 0801 	adds.w	r8, r2, r1
 80038a8:	4629      	mov	r1, r5
 80038aa:	eb43 0901 	adc.w	r9, r3, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c2:	4690      	mov	r8, r2
 80038c4:	4699      	mov	r9, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	eb18 0303 	adds.w	r3, r8, r3
 80038cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038d0:	462b      	mov	r3, r5
 80038d2:	eb49 0303 	adc.w	r3, r9, r3
 80038d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ee:	460b      	mov	r3, r1
 80038f0:	18db      	adds	r3, r3, r3
 80038f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038f4:	4613      	mov	r3, r2
 80038f6:	eb42 0303 	adc.w	r3, r2, r3
 80038fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80038fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003904:	f7fc fc7e 	bl	8000204 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4b61      	ldr	r3, [pc, #388]	@ (8003a94 <UART_SetConfig+0x2d4>)
 800390e:	fba3 2302 	umull	r2, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011c      	lsls	r4, r3, #4
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003920:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	1891      	adds	r1, r2, r2
 800392e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003930:	415b      	adcs	r3, r3
 8003932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003938:	4641      	mov	r1, r8
 800393a:	eb12 0a01 	adds.w	sl, r2, r1
 800393e:	4649      	mov	r1, r9
 8003940:	eb43 0b01 	adc.w	fp, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003958:	4692      	mov	sl, r2
 800395a:	469b      	mov	fp, r3
 800395c:	4643      	mov	r3, r8
 800395e:	eb1a 0303 	adds.w	r3, sl, r3
 8003962:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003966:	464b      	mov	r3, r9
 8003968:	eb4b 0303 	adc.w	r3, fp, r3
 800396c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800397c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003984:	460b      	mov	r3, r1
 8003986:	18db      	adds	r3, r3, r3
 8003988:	643b      	str	r3, [r7, #64]	@ 0x40
 800398a:	4613      	mov	r3, r2
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	647b      	str	r3, [r7, #68]	@ 0x44
 8003992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800399a:	f7fc fc33 	bl	8000204 <__aeabi_uldivmod>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <UART_SetConfig+0x2d4>)
 80039a6:	fba3 2301 	umull	r2, r3, r3, r1
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2264      	movs	r2, #100	@ 0x64
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	1acb      	subs	r3, r1, r3
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ba:	4b36      	ldr	r3, [pc, #216]	@ (8003a94 <UART_SetConfig+0x2d4>)
 80039bc:	fba3 2302 	umull	r2, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039c8:	441c      	add	r4, r3
 80039ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039dc:	4642      	mov	r2, r8
 80039de:	464b      	mov	r3, r9
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039e4:	415b      	adcs	r3, r3
 80039e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039ec:	4641      	mov	r1, r8
 80039ee:	1851      	adds	r1, r2, r1
 80039f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80039f2:	4649      	mov	r1, r9
 80039f4:	414b      	adcs	r3, r1
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a04:	4659      	mov	r1, fp
 8003a06:	00cb      	lsls	r3, r1, #3
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0e:	4651      	mov	r1, sl
 8003a10:	00ca      	lsls	r2, r1, #3
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	4642      	mov	r2, r8
 8003a1a:	189b      	adds	r3, r3, r2
 8003a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a20:	464b      	mov	r3, r9
 8003a22:	460a      	mov	r2, r1
 8003a24:	eb42 0303 	adc.w	r3, r2, r3
 8003a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a40:	460b      	mov	r3, r1
 8003a42:	18db      	adds	r3, r3, r3
 8003a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a46:	4613      	mov	r3, r2
 8003a48:	eb42 0303 	adc.w	r3, r2, r3
 8003a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a56:	f7fc fbd5 	bl	8000204 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <UART_SetConfig+0x2d4>)
 8003a60:	fba3 1302 	umull	r1, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	2164      	movs	r1, #100	@ 0x64
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	3332      	adds	r3, #50	@ 0x32
 8003a72:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <UART_SetConfig+0x2d4>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	f003 0207 	and.w	r2, r3, #7
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4422      	add	r2, r4
 8003a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a88:	e106      	b.n	8003c98 <UART_SetConfig+0x4d8>
 8003a8a:	bf00      	nop
 8003a8c:	40011000 	.word	0x40011000
 8003a90:	40011400 	.word	0x40011400
 8003a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aaa:	4642      	mov	r2, r8
 8003aac:	464b      	mov	r3, r9
 8003aae:	1891      	adds	r1, r2, r2
 8003ab0:	6239      	str	r1, [r7, #32]
 8003ab2:	415b      	adcs	r3, r3
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aba:	4641      	mov	r1, r8
 8003abc:	1854      	adds	r4, r2, r1
 8003abe:	4649      	mov	r1, r9
 8003ac0:	eb43 0501 	adc.w	r5, r3, r1
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	00eb      	lsls	r3, r5, #3
 8003ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad2:	00e2      	lsls	r2, r4, #3
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	4643      	mov	r3, r8
 8003ada:	18e3      	adds	r3, r4, r3
 8003adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	eb45 0303 	adc.w	r3, r5, r3
 8003ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b06:	4629      	mov	r1, r5
 8003b08:	008b      	lsls	r3, r1, #2
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b10:	4621      	mov	r1, r4
 8003b12:	008a      	lsls	r2, r1, #2
 8003b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b18:	f7fc fb74 	bl	8000204 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4b60      	ldr	r3, [pc, #384]	@ (8003ca4 <UART_SetConfig+0x4e4>)
 8003b22:	fba3 2302 	umull	r2, r3, r3, r2
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	011c      	lsls	r4, r3, #4
 8003b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	61b9      	str	r1, [r7, #24]
 8003b44:	415b      	adcs	r3, r3
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	1851      	adds	r1, r2, r1
 8003b50:	6139      	str	r1, [r7, #16]
 8003b52:	4649      	mov	r1, r9
 8003b54:	414b      	adcs	r3, r1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b64:	4659      	mov	r1, fp
 8003b66:	00cb      	lsls	r3, r1, #3
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	4651      	mov	r1, sl
 8003b70:	00ca      	lsls	r2, r1, #3
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	4642      	mov	r2, r8
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b80:	464b      	mov	r3, r9
 8003b82:	460a      	mov	r2, r1
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	008b      	lsls	r3, r1, #2
 8003ba8:	4641      	mov	r1, r8
 8003baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bae:	4641      	mov	r1, r8
 8003bb0:	008a      	lsls	r2, r1, #2
 8003bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bb6:	f7fc fb25 	bl	8000204 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <UART_SetConfig+0x4e4>)
 8003bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2264      	movs	r2, #100	@ 0x64
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	1acb      	subs	r3, r1, r3
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	3332      	adds	r3, #50	@ 0x32
 8003bd4:	4a33      	ldr	r2, [pc, #204]	@ (8003ca4 <UART_SetConfig+0x4e4>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be0:	441c      	add	r4, r3
 8003be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be6:	2200      	movs	r2, #0
 8003be8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bea:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	1891      	adds	r1, r2, r2
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	415b      	adcs	r3, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c00:	4641      	mov	r1, r8
 8003c02:	1851      	adds	r1, r2, r1
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	4649      	mov	r1, r9
 8003c08:	414b      	adcs	r3, r1
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c18:	4659      	mov	r1, fp
 8003c1a:	00cb      	lsls	r3, r1, #3
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c22:	4651      	mov	r1, sl
 8003c24:	00ca      	lsls	r2, r1, #3
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c32:	464b      	mov	r3, r9
 8003c34:	460a      	mov	r2, r1
 8003c36:	eb42 0303 	adc.w	r3, r2, r3
 8003c3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c46:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c54:	4649      	mov	r1, r9
 8003c56:	008b      	lsls	r3, r1, #2
 8003c58:	4641      	mov	r1, r8
 8003c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5e:	4641      	mov	r1, r8
 8003c60:	008a      	lsls	r2, r1, #2
 8003c62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c66:	f7fc facd 	bl	8000204 <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <UART_SetConfig+0x4e4>)
 8003c70:	fba3 1302 	umull	r1, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	2164      	movs	r1, #100	@ 0x64
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	3332      	adds	r3, #50	@ 0x32
 8003c82:	4a08      	ldr	r2, [pc, #32]	@ (8003ca4 <UART_SetConfig+0x4e4>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4422      	add	r2, r4
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca4:	51eb851f 	.word	0x51eb851f

08003ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d165      	bne.n	8003d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a41      	ldr	r2, [pc, #260]	@ (8003dc4 <USB_SetTurnaroundTime+0x11c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d906      	bls.n	8003cd2 <USB_SetTurnaroundTime+0x2a>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4a40      	ldr	r2, [pc, #256]	@ (8003dc8 <USB_SetTurnaroundTime+0x120>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d202      	bcs.n	8003cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ccc:	230f      	movs	r3, #15
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e062      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc8 <USB_SetTurnaroundTime+0x120>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d306      	bcc.n	8003ce8 <USB_SetTurnaroundTime+0x40>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dcc <USB_SetTurnaroundTime+0x124>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d202      	bcs.n	8003ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ce2:	230e      	movs	r3, #14
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e057      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a38      	ldr	r2, [pc, #224]	@ (8003dcc <USB_SetTurnaroundTime+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d306      	bcc.n	8003cfe <USB_SetTurnaroundTime+0x56>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	@ (8003dd0 <USB_SetTurnaroundTime+0x128>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d202      	bcs.n	8003cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cf8:	230d      	movs	r3, #13
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e04c      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <USB_SetTurnaroundTime+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d306      	bcc.n	8003d14 <USB_SetTurnaroundTime+0x6c>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4a32      	ldr	r2, [pc, #200]	@ (8003dd4 <USB_SetTurnaroundTime+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d802      	bhi.n	8003d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d0e:	230c      	movs	r3, #12
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e041      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <USB_SetTurnaroundTime+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d906      	bls.n	8003d2a <USB_SetTurnaroundTime+0x82>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd8 <USB_SetTurnaroundTime+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d802      	bhi.n	8003d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d24:	230b      	movs	r3, #11
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e036      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003dd8 <USB_SetTurnaroundTime+0x130>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d906      	bls.n	8003d40 <USB_SetTurnaroundTime+0x98>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a29      	ldr	r2, [pc, #164]	@ (8003ddc <USB_SetTurnaroundTime+0x134>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e02b      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a26      	ldr	r2, [pc, #152]	@ (8003ddc <USB_SetTurnaroundTime+0x134>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d906      	bls.n	8003d56 <USB_SetTurnaroundTime+0xae>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a25      	ldr	r2, [pc, #148]	@ (8003de0 <USB_SetTurnaroundTime+0x138>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d202      	bcs.n	8003d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d50:	2309      	movs	r3, #9
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e020      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <USB_SetTurnaroundTime+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d306      	bcc.n	8003d6c <USB_SetTurnaroundTime+0xc4>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <USB_SetTurnaroundTime+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d802      	bhi.n	8003d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d66:	2308      	movs	r3, #8
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e015      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003de4 <USB_SetTurnaroundTime+0x13c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d906      	bls.n	8003d82 <USB_SetTurnaroundTime+0xda>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <USB_SetTurnaroundTime+0x140>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d202      	bcs.n	8003d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e00a      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d82:	2306      	movs	r3, #6
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e007      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d8e:	2309      	movs	r3, #9
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e001      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d94:	2309      	movs	r3, #9
 8003d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	029b      	lsls	r3, r3, #10
 8003dac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	00d8acbf 	.word	0x00d8acbf
 8003dc8:	00e4e1c0 	.word	0x00e4e1c0
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	01067380 	.word	0x01067380
 8003dd4:	011a499f 	.word	0x011a499f
 8003dd8:	01312cff 	.word	0x01312cff
 8003ddc:	014ca43f 	.word	0x014ca43f
 8003de0:	016e3600 	.word	0x016e3600
 8003de4:	01a6ab1f 	.word	0x01a6ab1f
 8003de8:	01e84800 	.word	0x01e84800

08003dec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e06:	d901      	bls.n	8003e0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e01b      	b.n	8003e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	daf2      	bge.n	8003dfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	019b      	lsls	r3, r3, #6
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e30:	d901      	bls.n	8003e36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e006      	b.n	8003e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d0f0      	beq.n	8003e24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0306 	and.w	r3, r3, #6
 8003e68:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]
 8003e74:	e00a      	b.n	8003e8c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d002      	beq.n	8003e82 <USB_GetDevSpeed+0x32>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d102      	bne.n	8003e88 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e82:	2302      	movs	r3, #2
 8003e84:	75fb      	strb	r3, [r7, #23]
 8003e86:	e001      	b.n	8003e8c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e88:	230f      	movs	r3, #15
 8003e8a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d13a      	bne.n	8003f2c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d155      	bne.n	8003f9a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	791b      	ldrb	r3, [r3, #4]
 8003f08:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f0a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	059b      	lsls	r3, r3, #22
 8003f10:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f12:	4313      	orrs	r3, r2
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e036      	b.n	8003f9a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11a      	bne.n	8003f9a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	791b      	ldrb	r3, [r3, #4]
 8003f7e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f80:	430b      	orrs	r3, r1
 8003f82:	4313      	orrs	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f98:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	@ 0x28
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f040 817f 	bne.w	80042c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d132      	bne.n	8004038 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ff0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004010:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004030:	0cdb      	lsrs	r3, r3, #19
 8004032:	04db      	lsls	r3, r3, #19
 8004034:	6113      	str	r3, [r2, #16]
 8004036:	e097      	b.n	8004168 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004052:	0cdb      	lsrs	r3, r3, #19
 8004054:	04db      	lsls	r3, r3, #19
 8004056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004072:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004076:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800407a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d11a      	bne.n	80040b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d903      	bls.n	8004096 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040b4:	6113      	str	r3, [r2, #16]
 80040b6:	e044      	b.n	8004142 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4413      	add	r3, r2
 80040c2:	1e5a      	subs	r2, r3, #1
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	8afb      	ldrh	r3, [r7, #22]
 80040de:	04d9      	lsls	r1, r3, #19
 80040e0:	4ba4      	ldr	r3, [pc, #656]	@ (8004374 <USB_EPStartXfer+0x3cc>)
 80040e2:	400b      	ands	r3, r1
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	0148      	lsls	r0, r1, #5
 80040e8:	69f9      	ldr	r1, [r7, #28]
 80040ea:	4401      	add	r1, r0
 80040ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	791b      	ldrb	r3, [r3, #4]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d122      	bne.n	8004142 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	0151      	lsls	r1, r2, #5
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	440a      	add	r2, r1
 8004112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004116:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800411a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	075b      	lsls	r3, r3, #29
 800412e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	0148      	lsls	r0, r1, #5
 8004136:	69f9      	ldr	r1, [r7, #28]
 8004138:	4401      	add	r1, r0
 800413a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800413e:	4313      	orrs	r3, r2
 8004140:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	69b9      	ldr	r1, [r7, #24]
 800415a:	0148      	lsls	r0, r1, #5
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	4401      	add	r1, r0
 8004160:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d14b      	bne.n	8004206 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	791b      	ldrb	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d128      	bne.n	80041e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e00f      	b.n	80041e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e166      	b.n	80044d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004220:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004224:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	791b      	ldrb	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d015      	beq.n	800425a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 814e 	beq.w	80044d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	2101      	movs	r1, #1
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	69f9      	ldr	r1, [r7, #28]
 8004250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004254:	4313      	orrs	r3, r2
 8004256:	634b      	str	r3, [r1, #52]	@ 0x34
 8004258:	e13c      	b.n	80044d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d110      	bne.n	800428c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e00f      	b.n	80042ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	68d9      	ldr	r1, [r3, #12]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	b298      	uxth	r0, r3
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4603      	mov	r3, r0
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f9b9 	bl	8004638 <USB_WritePacket>
 80042c6:	e105      	b.n	80044d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042e2:	0cdb      	lsrs	r3, r3, #19
 80042e4:	04db      	lsls	r3, r3, #19
 80042e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004302:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004306:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800430a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d132      	bne.n	8004378 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	0148      	lsls	r0, r1, #5
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	4401      	add	r1, r0
 8004348:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800436a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800436e:	6113      	str	r3, [r2, #16]
 8004370:	e062      	b.n	8004438 <USB_EPStartXfer+0x490>
 8004372:	bf00      	nop
 8004374:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d123      	bne.n	80043c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004396:	69b9      	ldr	r1, [r7, #24]
 8004398:	0148      	lsls	r0, r1, #5
 800439a:	69f9      	ldr	r1, [r7, #28]
 800439c:	4401      	add	r1, r0
 800439e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043a2:	4313      	orrs	r3, r2
 80043a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	0151      	lsls	r1, r2, #5
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	440a      	add	r2, r1
 80043bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043c4:	6113      	str	r3, [r2, #16]
 80043c6:	e037      	b.n	8004438 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4413      	add	r3, r2
 80043d2:	1e5a      	subs	r2, r3, #1
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	8afa      	ldrh	r2, [r7, #22]
 80043e4:	fb03 f202 	mul.w	r2, r3, r2
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	8afb      	ldrh	r3, [r7, #22]
 80043fc:	04d9      	lsls	r1, r3, #19
 80043fe:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <USB_EPStartXfer+0x538>)
 8004400:	400b      	ands	r3, r1
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	0148      	lsls	r0, r1, #5
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	4401      	add	r1, r0
 800440a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800440e:	4313      	orrs	r3, r2
 8004410:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004428:	69b9      	ldr	r1, [r7, #24]
 800442a:	0148      	lsls	r0, r1, #5
 800442c:	69f9      	ldr	r1, [r7, #28]
 800442e:	4401      	add	r1, r0
 8004430:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004434:	4313      	orrs	r3, r2
 8004436:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10d      	bne.n	800445a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004456:	460a      	mov	r2, r1
 8004458:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	791b      	ldrb	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d128      	bne.n	80044b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d110      	bne.n	8004494 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800448c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00f      	b.n	80044b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80044d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	1ff80000 	.word	0x1ff80000

080044e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d14a      	bne.n	8004598 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800451a:	f040 8086 	bne.w	800462a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	440a      	add	r2, r1
 8004538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800453c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004540:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004560:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004564:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004572:	4293      	cmp	r3, r2
 8004574:	d902      	bls.n	800457c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
          break;
 800457a:	e056      	b.n	800462a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004594:	d0e7      	beq.n	8004566 <USB_EPStopXfer+0x82>
 8004596:	e048      	b.n	800462a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045b0:	d13b      	bne.n	800462a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	0151      	lsls	r1, r2, #5
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	440a      	add	r2, r1
 80045cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004606:	4293      	cmp	r3, r2
 8004608:	d902      	bls.n	8004610 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
          break;
 800460e:	e00c      	b.n	800462a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004628:	d0e7      	beq.n	80045fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800462a:	7dfb      	ldrb	r3, [r7, #23]
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	460b      	mov	r3, r1
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	4613      	mov	r3, r2
 800464c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004656:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d123      	bne.n	80046a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800465e:	88bb      	ldrh	r3, [r7, #4]
 8004660:	3303      	adds	r3, #3
 8004662:	089b      	lsrs	r3, r3, #2
 8004664:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	e018      	b.n	800469e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	031a      	lsls	r2, r3, #12
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4413      	add	r3, r2
 8004674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004678:	461a      	mov	r2, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3301      	adds	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	3301      	adds	r3, #1
 8004690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	3301      	adds	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d3e2      	bcc.n	800466c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3724      	adds	r7, #36	@ 0x24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b08b      	sub	sp, #44	@ 0x2c
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4613      	mov	r3, r2
 80046c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	e014      	b.n	800470a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	3301      	adds	r3, #1
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	3301      	adds	r3, #1
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	3301      	adds	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	3301      	adds	r3, #1
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	3301      	adds	r3, #1
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	6a3a      	ldr	r2, [r7, #32]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	429a      	cmp	r2, r3
 8004710:	d3e6      	bcc.n	80046e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004712:	8bfb      	ldrh	r3, [r7, #30]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01e      	beq.n	8004756 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004722:	461a      	mov	r2, r3
 8004724:	f107 0310 	add.w	r3, r7, #16
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	b2da      	uxtb	r2, r3
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	701a      	strb	r2, [r3, #0]
      i++;
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	3301      	adds	r3, #1
 8004742:	623b      	str	r3, [r7, #32]
      pDest++;
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	3301      	adds	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800474a:	8bfb      	ldrh	r3, [r7, #30]
 800474c:	3b01      	subs	r3, #1
 800474e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004750:	8bfb      	ldrh	r3, [r7, #30]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ea      	bne.n	800472c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004758:	4618      	mov	r0, r3
 800475a:	372c      	adds	r7, #44	@ 0x2c
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d12c      	bne.n	80047da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db12      	blt.n	80047b8 <USB_EPSetStall+0x54>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00f      	beq.n	80047b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e02b      	b.n	8004832 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	db12      	blt.n	8004812 <USB_EPSetStall+0xae>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00f      	beq.n	8004812 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800480c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004810:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800482c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004830:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d128      	bne.n	80048ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004876:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800487a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	791b      	ldrb	r3, [r3, #4]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d003      	beq.n	800488c <USB_EPClearStall+0x4c>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d138      	bne.n	80048fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e027      	b.n	80048fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	791b      	ldrb	r3, [r3, #4]
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d003      	beq.n	80048de <USB_EPClearStall+0x9e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	791b      	ldrb	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d10f      	bne.n	80048fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800492a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800492e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004970:	68fb      	ldr	r3, [r7, #12]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	4013      	ands	r3, r2
 80049a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0c1b      	lsrs	r3, r3, #16
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	b29b      	uxth	r3, r3
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a14:	68bb      	ldr	r3, [r7, #8]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b087      	sub	sp, #28
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a5c:	78fb      	ldrb	r3, [r7, #3]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a70:	68bb      	ldr	r3, [r7, #8]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ab4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ab8:	f023 0307 	bic.w	r3, r3, #7
 8004abc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	333c      	adds	r3, #60	@ 0x3c
 8004af6:	3304      	adds	r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4a26      	ldr	r2, [pc, #152]	@ (8004b98 <USB_EP0_OutStart+0xb8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d90a      	bls.n	8004b1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b14:	d101      	bne.n	8004b1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e037      	b.n	8004b8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	2300      	movs	r3, #0
 8004b24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b48:	f043 0318 	orr.w	r3, r3, #24
 8004b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004b60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10f      	bne.n	8004b88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	4f54300a 	.word	0x4f54300a

08004b9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ba4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	4611      	mov	r1, r2
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004c10:	2303      	movs	r3, #3
 8004c12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f001 f8e2 	bl	8005dfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d01a      	beq.n	8004c90 <USBD_LL_SetupStage+0x72>
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d822      	bhi.n	8004ca4 <USBD_LL_SetupStage+0x86>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <USBD_LL_SetupStage+0x4a>
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d00a      	beq.n	8004c7c <USBD_LL_SetupStage+0x5e>
 8004c66:	e01d      	b.n	8004ca4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fb0f 	bl	8005294 <USBD_StdDevReq>
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7a:	e020      	b.n	8004cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fb77 	bl	8005378 <USBD_StdItfReq>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8e:	e016      	b.n	8004cbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c96:	4619      	mov	r1, r3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fbd9 	bl	8005450 <USBD_StdEPReq>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca2:	e00c      	b.n	8004cbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004caa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 fa66 	bl	8006184 <USBD_LL_StallEP>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
      break;
 8004cbc:	bf00      	nop
  }

  return ret;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d16e      	bne.n	8004dbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004ce6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	f040 8098 	bne.w	8004e24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d913      	bls.n	8004d28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	1ad2      	subs	r2, r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	4293      	cmp	r3, r2
 8004d18:	bf28      	it	cs
 8004d1a:	4613      	movcs	r3, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f001 f8e1 	bl	8005ee8 <USBD_CtlContinueRx>
 8004d26:	e07d      	b.n	8004e24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d014      	beq.n	8004d60 <USBD_LL_DataOutStage+0x98>
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d81d      	bhi.n	8004d76 <USBD_LL_DataOutStage+0xae>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <USBD_LL_DataOutStage+0x7c>
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d003      	beq.n	8004d4a <USBD_LL_DataOutStage+0x82>
 8004d42:	e018      	b.n	8004d76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	75bb      	strb	r3, [r7, #22]
            break;
 8004d48:	e018      	b.n	8004d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	4619      	mov	r1, r3
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fa64 	bl	8005222 <USBD_CoreFindIF>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75bb      	strb	r3, [r7, #22]
            break;
 8004d5e:	e00d      	b.n	8004d7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fa66 	bl	800523c <USBD_CoreFindEP>
 8004d70:	4603      	mov	r3, r0
 8004d72:	75bb      	strb	r3, [r7, #22]
            break;
 8004d74:	e002      	b.n	8004d7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75bb      	strb	r3, [r7, #22]
            break;
 8004d7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004d7c:	7dbb      	ldrb	r3, [r7, #22]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d119      	bne.n	8004db6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d113      	bne.n	8004db6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004d8e:	7dba      	ldrb	r2, [r7, #22]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	32ae      	adds	r2, #174	@ 0xae
 8004d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004d9e:	7dba      	ldrb	r2, [r7, #22]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004da6:	7dba      	ldrb	r2, [r7, #22]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	32ae      	adds	r2, #174	@ 0xae
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f001 f8a7 	bl	8005f0a <USBD_CtlSendStatus>
 8004dbc:	e032      	b.n	8004e24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004dbe:	7afb      	ldrb	r3, [r7, #11]
 8004dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fa37 	bl	800523c <USBD_CoreFindEP>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004dd2:	7dbb      	ldrb	r3, [r7, #22]
 8004dd4:	2bff      	cmp	r3, #255	@ 0xff
 8004dd6:	d025      	beq.n	8004e24 <USBD_LL_DataOutStage+0x15c>
 8004dd8:	7dbb      	ldrb	r3, [r7, #22]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d122      	bne.n	8004e24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d117      	bne.n	8004e1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004dea:	7dba      	ldrb	r2, [r7, #22]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	32ae      	adds	r2, #174	@ 0xae
 8004df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00f      	beq.n	8004e1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004dfa:	7dba      	ldrb	r2, [r7, #22]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004e02:	7dba      	ldrb	r2, [r7, #22]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	32ae      	adds	r2, #174	@ 0xae
 8004e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	7afa      	ldrb	r2, [r7, #11]
 8004e10:	4611      	mov	r1, r2
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	4798      	blx	r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
 8004e22:	e000      	b.n	8004e26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	460b      	mov	r3, r1
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004e3c:	7afb      	ldrb	r3, [r7, #11]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d16f      	bne.n	8004f22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3314      	adds	r3, #20
 8004e46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d15a      	bne.n	8004f08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d914      	bls.n	8004e88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	1ad2      	subs	r2, r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	461a      	mov	r2, r3
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f001 f826 	bl	8005ec6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2100      	movs	r1, #0
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f001 fa29 	bl	80062d8 <USBD_LL_PrepareReceive>
 8004e86:	e03f      	b.n	8004f08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d11c      	bne.n	8004ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d316      	bcc.n	8004ece <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d20f      	bcs.n	8004ece <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f001 f807 	bl	8005ec6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f001 fa06 	bl	80062d8 <USBD_LL_PrepareReceive>
 8004ecc:	e01c      	b.n	8004f08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d10f      	bne.n	8004efa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004efa:	2180      	movs	r1, #128	@ 0x80
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f001 f941 	bl	8006184 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f001 f814 	bl	8005f30 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d03a      	beq.n	8004f88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fe42 	bl	8004b9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004f20:	e032      	b.n	8004f88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004f22:	7afb      	ldrb	r3, [r7, #11]
 8004f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f985 	bl	800523c <USBD_CoreFindEP>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	2bff      	cmp	r3, #255	@ 0xff
 8004f3a:	d025      	beq.n	8004f88 <USBD_LL_DataInStage+0x15a>
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d122      	bne.n	8004f88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d11c      	bne.n	8004f88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004f4e:	7dfa      	ldrb	r2, [r7, #23]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	32ae      	adds	r2, #174	@ 0xae
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004f5e:	7dfa      	ldrb	r2, [r7, #23]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004f66:	7dfa      	ldrb	r2, [r7, #23]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	32ae      	adds	r2, #174	@ 0xae
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	7afa      	ldrb	r2, [r7, #11]
 8004f74:	4611      	mov	r1, r2
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	4798      	blx	r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004f7e:	7dbb      	ldrb	r3, [r7, #22]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004f84:	7dbb      	ldrb	r3, [r7, #22]
 8004f86:	e000      	b.n	8004f8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d014      	beq.n	8004ff8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6852      	ldr	r2, [r2, #4]
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	4611      	mov	r1, r2
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ff8:	2340      	movs	r3, #64	@ 0x40
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 f89a 	bl	8006138 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005014:	2340      	movs	r3, #64	@ 0x40
 8005016:	2200      	movs	r2, #0
 8005018:	2180      	movs	r1, #128	@ 0x80
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f001 f88c 	bl	8006138 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2240      	movs	r2, #64	@ 0x40
 800502a:	621a      	str	r2, [r3, #32]

  return ret;
 800502c:	7bfb      	ldrb	r3, [r7, #15]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b04      	cmp	r3, #4
 8005068:	d006      	beq.n	8005078 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005070:	b2da      	uxtb	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d106      	bne.n	80050b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d110      	bne.n	80050f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	32ae      	adds	r2, #174	@ 0xae
 8005114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800511c:	2303      	movs	r3, #3
 800511e:	e01c      	b.n	800515a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d115      	bne.n	8005158 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	32ae      	adds	r2, #174	@ 0xae
 8005136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	32ae      	adds	r2, #174	@ 0xae
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	4611      	mov	r1, r2
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	32ae      	adds	r2, #174	@ 0xae
 8005178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	e01c      	b.n	80051be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b03      	cmp	r3, #3
 800518e:	d115      	bne.n	80051bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	32ae      	adds	r2, #174	@ 0xae
 800519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	32ae      	adds	r2, #174	@ 0xae
 80051ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	4611      	mov	r1, r2
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00e      	beq.n	8005218 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6852      	ldr	r2, [r2, #4]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	4611      	mov	r1, r2
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005214:	2303      	movs	r3, #3
 8005216:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800522e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005248:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005256:	b480      	push	{r7}
 8005258:	b087      	sub	sp, #28
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3301      	adds	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005274:	8a3b      	ldrh	r3, [r7, #16]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	b21a      	sxth	r2, r3
 800527a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800527e:	4313      	orrs	r3, r2
 8005280:	b21b      	sxth	r3, r3
 8005282:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005284:	89fb      	ldrh	r3, [r7, #14]
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052aa:	2b40      	cmp	r3, #64	@ 0x40
 80052ac:	d005      	beq.n	80052ba <USBD_StdDevReq+0x26>
 80052ae:	2b40      	cmp	r3, #64	@ 0x40
 80052b0:	d857      	bhi.n	8005362 <USBD_StdDevReq+0xce>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00f      	beq.n	80052d6 <USBD_StdDevReq+0x42>
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d153      	bne.n	8005362 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	32ae      	adds	r2, #174	@ 0xae
 80052c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e04a      	b.n	800536c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b09      	cmp	r3, #9
 80052dc:	d83b      	bhi.n	8005356 <USBD_StdDevReq+0xc2>
 80052de:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <USBD_StdDevReq+0x50>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005339 	.word	0x08005339
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	08005357 	.word	0x08005357
 80052f0:	08005343 	.word	0x08005343
 80052f4:	08005357 	.word	0x08005357
 80052f8:	08005317 	.word	0x08005317
 80052fc:	0800530d 	.word	0x0800530d
 8005300:	08005357 	.word	0x08005357
 8005304:	0800532f 	.word	0x0800532f
 8005308:	08005321 	.word	0x08005321
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa3c 	bl	800578c <USBD_GetDescriptor>
          break;
 8005314:	e024      	b.n	8005360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fbcb 	bl	8005ab4 <USBD_SetAddress>
          break;
 800531e:	e01f      	b.n	8005360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fc0a 	bl	8005b3c <USBD_SetConfig>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
          break;
 800532c:	e018      	b.n	8005360 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fcad 	bl	8005c90 <USBD_GetConfig>
          break;
 8005336:	e013      	b.n	8005360 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fcde 	bl	8005cfc <USBD_GetStatus>
          break;
 8005340:	e00e      	b.n	8005360 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fd0d 	bl	8005d64 <USBD_SetFeature>
          break;
 800534a:	e009      	b.n	8005360 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fd31 	bl	8005db6 <USBD_ClrFeature>
          break;
 8005354:	e004      	b.n	8005360 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fd88 	bl	8005e6e <USBD_CtlError>
          break;
 800535e:	bf00      	nop
      }
      break;
 8005360:	e004      	b.n	800536c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fd82 	bl	8005e6e <USBD_CtlError>
      break;
 800536a:	bf00      	nop
  }

  return ret;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800538e:	2b40      	cmp	r3, #64	@ 0x40
 8005390:	d005      	beq.n	800539e <USBD_StdItfReq+0x26>
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d852      	bhi.n	800543c <USBD_StdItfReq+0xc4>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <USBD_StdItfReq+0x26>
 800539a:	2b20      	cmp	r3, #32
 800539c:	d14e      	bne.n	800543c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d840      	bhi.n	800542e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	889b      	ldrh	r3, [r3, #4]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d836      	bhi.n	8005424 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	889b      	ldrh	r3, [r3, #4]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff2f 	bl	8005222 <USBD_CoreFindIF>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2bff      	cmp	r3, #255	@ 0xff
 80053cc:	d01d      	beq.n	800540a <USBD_StdItfReq+0x92>
 80053ce:	7bbb      	ldrb	r3, [r7, #14]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11a      	bne.n	800540a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80053d4:	7bba      	ldrb	r2, [r7, #14]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	32ae      	adds	r2, #174	@ 0xae
 80053da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00f      	beq.n	8005404 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80053e4:	7bba      	ldrb	r2, [r7, #14]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80053ec:	7bba      	ldrb	r2, [r7, #14]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	32ae      	adds	r2, #174	@ 0xae
 80053f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
 80053fe:	4603      	mov	r3, r0
 8005400:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005402:	e004      	b.n	800540e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005408:	e001      	b.n	800540e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	88db      	ldrh	r3, [r3, #6]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d110      	bne.n	8005438 <USBD_StdItfReq+0xc0>
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10d      	bne.n	8005438 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fd74 	bl	8005f0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005422:	e009      	b.n	8005438 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd21 	bl	8005e6e <USBD_CtlError>
          break;
 800542c:	e004      	b.n	8005438 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fd1c 	bl	8005e6e <USBD_CtlError>
          break;
 8005436:	e000      	b.n	800543a <USBD_StdItfReq+0xc2>
          break;
 8005438:	bf00      	nop
      }
      break;
 800543a:	e004      	b.n	8005446 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd15 	bl	8005e6e <USBD_CtlError>
      break;
 8005444:	bf00      	nop
  }

  return ret;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	889b      	ldrh	r3, [r3, #4]
 8005462:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d007      	beq.n	8005480 <USBD_StdEPReq+0x30>
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	f200 817f 	bhi.w	8005774 <USBD_StdEPReq+0x324>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d02a      	beq.n	80054d0 <USBD_StdEPReq+0x80>
 800547a:	2b20      	cmp	r3, #32
 800547c:	f040 817a 	bne.w	8005774 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff fed9 	bl	800523c <USBD_CoreFindEP>
 800548a:	4603      	mov	r3, r0
 800548c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800548e:	7b7b      	ldrb	r3, [r7, #13]
 8005490:	2bff      	cmp	r3, #255	@ 0xff
 8005492:	f000 8174 	beq.w	800577e <USBD_StdEPReq+0x32e>
 8005496:	7b7b      	ldrb	r3, [r7, #13]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 8170 	bne.w	800577e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800549e:	7b7a      	ldrb	r2, [r7, #13]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80054a6:	7b7a      	ldrb	r2, [r7, #13]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	32ae      	adds	r2, #174	@ 0xae
 80054ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8163 	beq.w	800577e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80054b8:	7b7a      	ldrb	r2, [r7, #13]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	32ae      	adds	r2, #174	@ 0xae
 80054be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054ce:	e156      	b.n	800577e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d008      	beq.n	80054ea <USBD_StdEPReq+0x9a>
 80054d8:	2b03      	cmp	r3, #3
 80054da:	f300 8145 	bgt.w	8005768 <USBD_StdEPReq+0x318>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 809b 	beq.w	800561a <USBD_StdEPReq+0x1ca>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d03c      	beq.n	8005562 <USBD_StdEPReq+0x112>
 80054e8:	e13e      	b.n	8005768 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d002      	beq.n	80054fc <USBD_StdEPReq+0xac>
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d016      	beq.n	8005528 <USBD_StdEPReq+0xd8>
 80054fa:	e02c      	b.n	8005556 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <USBD_StdEPReq+0xce>
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	2b80      	cmp	r3, #128	@ 0x80
 8005506:	d00a      	beq.n	800551e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fe39 	bl	8006184 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005512:	2180      	movs	r1, #128	@ 0x80
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fe35 	bl	8006184 <USBD_LL_StallEP>
 800551a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800551c:	e020      	b.n	8005560 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fca4 	bl	8005e6e <USBD_CtlError>
              break;
 8005526:	e01b      	b.n	8005560 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	885b      	ldrh	r3, [r3, #2]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10e      	bne.n	800554e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005530:	7bbb      	ldrb	r3, [r7, #14]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <USBD_StdEPReq+0xfe>
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	2b80      	cmp	r3, #128	@ 0x80
 800553a:	d008      	beq.n	800554e <USBD_StdEPReq+0xfe>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	88db      	ldrh	r3, [r3, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fe1b 	bl	8006184 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fcdb 	bl	8005f0a <USBD_CtlSendStatus>

              break;
 8005554:	e004      	b.n	8005560 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fc88 	bl	8005e6e <USBD_CtlError>
              break;
 800555e:	bf00      	nop
          }
          break;
 8005560:	e107      	b.n	8005772 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d002      	beq.n	8005574 <USBD_StdEPReq+0x124>
 800556e:	2b03      	cmp	r3, #3
 8005570:	d016      	beq.n	80055a0 <USBD_StdEPReq+0x150>
 8005572:	e04b      	b.n	800560c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005574:	7bbb      	ldrb	r3, [r7, #14]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00d      	beq.n	8005596 <USBD_StdEPReq+0x146>
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	2b80      	cmp	r3, #128	@ 0x80
 800557e:	d00a      	beq.n	8005596 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005580:	7bbb      	ldrb	r3, [r7, #14]
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fdfd 	bl	8006184 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800558a:	2180      	movs	r1, #128	@ 0x80
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fdf9 	bl	8006184 <USBD_LL_StallEP>
 8005592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005594:	e040      	b.n	8005618 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fc68 	bl	8005e6e <USBD_CtlError>
              break;
 800559e:	e03b      	b.n	8005618 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	885b      	ldrh	r3, [r3, #2]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d136      	bne.n	8005616 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fe03 	bl	80061c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fca4 	bl	8005f0a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80055c2:	7bbb      	ldrb	r3, [r7, #14]
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fe38 	bl	800523c <USBD_CoreFindEP>
 80055cc:	4603      	mov	r3, r0
 80055ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055d0:	7b7b      	ldrb	r3, [r7, #13]
 80055d2:	2bff      	cmp	r3, #255	@ 0xff
 80055d4:	d01f      	beq.n	8005616 <USBD_StdEPReq+0x1c6>
 80055d6:	7b7b      	ldrb	r3, [r7, #13]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11c      	bne.n	8005616 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80055dc:	7b7a      	ldrb	r2, [r7, #13]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80055e4:	7b7a      	ldrb	r2, [r7, #13]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	32ae      	adds	r2, #174	@ 0xae
 80055ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d010      	beq.n	8005616 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80055f4:	7b7a      	ldrb	r2, [r7, #13]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	32ae      	adds	r2, #174	@ 0xae
 80055fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
 8005606:	4603      	mov	r3, r0
 8005608:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800560a:	e004      	b.n	8005616 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fc2d 	bl	8005e6e <USBD_CtlError>
              break;
 8005614:	e000      	b.n	8005618 <USBD_StdEPReq+0x1c8>
              break;
 8005616:	bf00      	nop
          }
          break;
 8005618:	e0ab      	b.n	8005772 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d002      	beq.n	800562c <USBD_StdEPReq+0x1dc>
 8005626:	2b03      	cmp	r3, #3
 8005628:	d032      	beq.n	8005690 <USBD_StdEPReq+0x240>
 800562a:	e097      	b.n	800575c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800562c:	7bbb      	ldrb	r3, [r7, #14]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <USBD_StdEPReq+0x1f2>
 8005632:	7bbb      	ldrb	r3, [r7, #14]
 8005634:	2b80      	cmp	r3, #128	@ 0x80
 8005636:	d004      	beq.n	8005642 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fc17 	bl	8005e6e <USBD_CtlError>
                break;
 8005640:	e091      	b.n	8005766 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005646:	2b00      	cmp	r3, #0
 8005648:	da0b      	bge.n	8005662 <USBD_StdEPReq+0x212>
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	3310      	adds	r3, #16
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	3304      	adds	r3, #4
 8005660:	e00b      	b.n	800567a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	3304      	adds	r3, #4
 800567a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2202      	movs	r2, #2
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fc01 	bl	8005e90 <USBD_CtlSendData>
              break;
 800568e:	e06a      	b.n	8005766 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005694:	2b00      	cmp	r3, #0
 8005696:	da11      	bge.n	80056bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005698:	7bbb      	ldrb	r3, [r7, #14]
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3324      	adds	r3, #36	@ 0x24
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d117      	bne.n	80056e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fbda 	bl	8005e6e <USBD_CtlError>
                  break;
 80056ba:	e054      	b.n	8005766 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fbc7 	bl	8005e6e <USBD_CtlError>
                  break;
 80056e0:	e041      	b.n	8005766 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da0b      	bge.n	8005702 <USBD_StdEPReq+0x2b2>
 80056ea:	7bbb      	ldrb	r3, [r7, #14]
 80056ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	3310      	adds	r3, #16
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4413      	add	r3, r2
 80056fe:	3304      	adds	r3, #4
 8005700:	e00b      	b.n	800571a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005702:	7bbb      	ldrb	r3, [r7, #14]
 8005704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	4413      	add	r3, r2
 8005718:	3304      	adds	r3, #4
 800571a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <USBD_StdEPReq+0x2d8>
 8005722:	7bbb      	ldrb	r3, [r7, #14]
 8005724:	2b80      	cmp	r3, #128	@ 0x80
 8005726:	d103      	bne.n	8005730 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e00e      	b.n	800574e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005730:	7bbb      	ldrb	r3, [r7, #14]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fd63 	bl	8006200 <USBD_LL_IsStallEP>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e002      	b.n	800574e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2202      	movs	r2, #2
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fb9b 	bl	8005e90 <USBD_CtlSendData>
              break;
 800575a:	e004      	b.n	8005766 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fb85 	bl	8005e6e <USBD_CtlError>
              break;
 8005764:	bf00      	nop
          }
          break;
 8005766:	e004      	b.n	8005772 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fb7f 	bl	8005e6e <USBD_CtlError>
          break;
 8005770:	bf00      	nop
      }
      break;
 8005772:	e005      	b.n	8005780 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fb79 	bl	8005e6e <USBD_CtlError>
      break;
 800577c:	e000      	b.n	8005780 <USBD_StdEPReq+0x330>
      break;
 800577e:	bf00      	nop
  }

  return ret;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	885b      	ldrh	r3, [r3, #2]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	2b0e      	cmp	r3, #14
 80057ae:	f200 8152 	bhi.w	8005a56 <USBD_GetDescriptor+0x2ca>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <USBD_GetDescriptor+0x2c>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	08005829 	.word	0x08005829
 80057bc:	08005841 	.word	0x08005841
 80057c0:	08005881 	.word	0x08005881
 80057c4:	08005a57 	.word	0x08005a57
 80057c8:	08005a57 	.word	0x08005a57
 80057cc:	080059f7 	.word	0x080059f7
 80057d0:	08005a23 	.word	0x08005a23
 80057d4:	08005a57 	.word	0x08005a57
 80057d8:	08005a57 	.word	0x08005a57
 80057dc:	08005a57 	.word	0x08005a57
 80057e0:	08005a57 	.word	0x08005a57
 80057e4:	08005a57 	.word	0x08005a57
 80057e8:	08005a57 	.word	0x08005a57
 80057ec:	08005a57 	.word	0x08005a57
 80057f0:	080057f5 	.word	0x080057f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	7c12      	ldrb	r2, [r2, #16]
 800580c:	f107 0108 	add.w	r1, r7, #8
 8005810:	4610      	mov	r0, r2
 8005812:	4798      	blx	r3
 8005814:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005816:	e126      	b.n	8005a66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fb27 	bl	8005e6e <USBD_CtlError>
        err++;
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	3301      	adds	r3, #1
 8005824:	72fb      	strb	r3, [r7, #11]
      break;
 8005826:	e11e      	b.n	8005a66 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	7c12      	ldrb	r2, [r2, #16]
 8005834:	f107 0108 	add.w	r1, r7, #8
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
 800583c:	60f8      	str	r0, [r7, #12]
      break;
 800583e:	e112      	b.n	8005a66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7c1b      	ldrb	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f107 0208 	add.w	r2, r7, #8
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
 8005858:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005862:	e100      	b.n	8005a66 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	f107 0208 	add.w	r2, r7, #8
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	2202      	movs	r2, #2
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e0f2      	b.n	8005a66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	885b      	ldrh	r3, [r3, #2]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b05      	cmp	r3, #5
 8005888:	f200 80ac 	bhi.w	80059e4 <USBD_GetDescriptor+0x258>
 800588c:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <USBD_GetDescriptor+0x108>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058e1 	.word	0x080058e1
 800589c:	08005915 	.word	0x08005915
 80058a0:	08005949 	.word	0x08005949
 80058a4:	0800597d 	.word	0x0800597d
 80058a8:	080059b1 	.word	0x080059b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	7c12      	ldrb	r2, [r2, #16]
 80058c4:	f107 0108 	add.w	r1, r7, #8
 80058c8:	4610      	mov	r0, r2
 80058ca:	4798      	blx	r3
 80058cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ce:	e091      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 facb 	bl	8005e6e <USBD_CtlError>
            err++;
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	3301      	adds	r3, #1
 80058dc:	72fb      	strb	r3, [r7, #11]
          break;
 80058de:	e089      	b.n	80059f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	7c12      	ldrb	r2, [r2, #16]
 80058f8:	f107 0108 	add.w	r1, r7, #8
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
 8005900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005902:	e077      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fab1 	bl	8005e6e <USBD_CtlError>
            err++;
 800590c:	7afb      	ldrb	r3, [r7, #11]
 800590e:	3301      	adds	r3, #1
 8005910:	72fb      	strb	r3, [r7, #11]
          break;
 8005912:	e06f      	b.n	80059f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	7c12      	ldrb	r2, [r2, #16]
 800592c:	f107 0108 	add.w	r1, r7, #8
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005936:	e05d      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa97 	bl	8005e6e <USBD_CtlError>
            err++;
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	3301      	adds	r3, #1
 8005944:	72fb      	strb	r3, [r7, #11]
          break;
 8005946:	e055      	b.n	80059f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	7c12      	ldrb	r2, [r2, #16]
 8005960:	f107 0108 	add.w	r1, r7, #8
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
 8005968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800596a:	e043      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa7d 	bl	8005e6e <USBD_CtlError>
            err++;
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	3301      	adds	r3, #1
 8005978:	72fb      	strb	r3, [r7, #11]
          break;
 800597a:	e03b      	b.n	80059f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	7c12      	ldrb	r2, [r2, #16]
 8005994:	f107 0108 	add.w	r1, r7, #8
 8005998:	4610      	mov	r0, r2
 800599a:	4798      	blx	r3
 800599c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800599e:	e029      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa63 	bl	8005e6e <USBD_CtlError>
            err++;
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	3301      	adds	r3, #1
 80059ac:	72fb      	strb	r3, [r7, #11]
          break;
 80059ae:	e021      	b.n	80059f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	7c12      	ldrb	r2, [r2, #16]
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
 80059d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059d2:	e00f      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa49 	bl	8005e6e <USBD_CtlError>
            err++;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	3301      	adds	r3, #1
 80059e0:	72fb      	strb	r3, [r7, #11]
          break;
 80059e2:	e007      	b.n	80059f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fa41 	bl	8005e6e <USBD_CtlError>
          err++;
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	3301      	adds	r3, #1
 80059f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80059f2:	bf00      	nop
      }
      break;
 80059f4:	e037      	b.n	8005a66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	f107 0208 	add.w	r2, r7, #8
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4798      	blx	r3
 8005a0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a10:	e029      	b.n	8005a66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa2a 	bl	8005e6e <USBD_CtlError>
        err++;
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8005a20:	e021      	b.n	8005a66 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7c1b      	ldrb	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	f107 0208 	add.w	r2, r7, #8
 8005a36:	4610      	mov	r0, r2
 8005a38:	4798      	blx	r3
 8005a3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	2207      	movs	r2, #7
 8005a42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a44:	e00f      	b.n	8005a66 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa10 	bl	8005e6e <USBD_CtlError>
        err++;
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	3301      	adds	r3, #1
 8005a52:	72fb      	strb	r3, [r7, #11]
      break;
 8005a54:	e007      	b.n	8005a66 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fa08 	bl	8005e6e <USBD_CtlError>
      err++;
 8005a5e:	7afb      	ldrb	r3, [r7, #11]
 8005a60:	3301      	adds	r3, #1
 8005a62:	72fb      	strb	r3, [r7, #11]
      break;
 8005a64:	bf00      	nop
  }

  if (err != 0U)
 8005a66:	7afb      	ldrb	r3, [r7, #11]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11e      	bne.n	8005aaa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d016      	beq.n	8005aa2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	88da      	ldrh	r2, [r3, #6]
 8005a7e:	893b      	ldrh	r3, [r7, #8]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bf28      	it	cs
 8005a84:	4613      	movcs	r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a8a:	893b      	ldrh	r3, [r7, #8]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f9fd 	bl	8005e90 <USBD_CtlSendData>
 8005a96:	e009      	b.n	8005aac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9e7 	bl	8005e6e <USBD_CtlError>
 8005aa0:	e004      	b.n	8005aac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa31 	bl	8005f0a <USBD_CtlSendStatus>
 8005aa8:	e000      	b.n	8005aac <USBD_GetDescriptor+0x320>
    return;
 8005aaa:	bf00      	nop
  }
}
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop

08005ab4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	889b      	ldrh	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d131      	bne.n	8005b2a <USBD_SetAddress+0x76>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	88db      	ldrh	r3, [r3, #6]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d12d      	bne.n	8005b2a <USBD_SetAddress+0x76>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	885b      	ldrh	r3, [r3, #2]
 8005ad2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ad4:	d829      	bhi.n	8005b2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d104      	bne.n	8005af8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9bc 	bl	8005e6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af6:	e01d      	b.n	8005b34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fba7 	bl	8006258 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f9fd 	bl	8005f0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1e:	e009      	b.n	8005b34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b28:	e004      	b.n	8005b34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f99e 	bl	8005e6e <USBD_CtlError>
  }
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b4e      	ldr	r3, [pc, #312]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005b52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b54:	4b4d      	ldr	r3, [pc, #308]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d905      	bls.n	8005b68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f985 	bl	8005e6e <USBD_CtlError>
    return USBD_FAIL;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e08c      	b.n	8005c82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d002      	beq.n	8005b7a <USBD_SetConfig+0x3e>
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d029      	beq.n	8005bcc <USBD_SetConfig+0x90>
 8005b78:	e075      	b.n	8005c66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005b7a:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d020      	beq.n	8005bc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005b82:	4b42      	ldr	r3, [pc, #264]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff f80d 	bl	8004bb2 <USBD_SetClassConfig>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f962 	bl	8005e6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005bb2:	e065      	b.n	8005c80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f9a8 	bl	8005f0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005bc2:	e05d      	b.n	8005c80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f9a0 	bl	8005f0a <USBD_CtlSendStatus>
      break;
 8005bca:	e059      	b.n	8005c80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d112      	bne.n	8005bfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005be6:	4b29      	ldr	r3, [pc, #164]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fe fffc 	bl	8004bea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f989 	bl	8005f0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005bf8:	e042      	b.n	8005c80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005bfa:	4b24      	ldr	r3, [pc, #144]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d02a      	beq.n	8005c5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fe ffea 	bl	8004bea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c20:	4b1a      	ldr	r3, [pc, #104]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fe ffc3 	bl	8004bb2 <USBD_SetClassConfig>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00f      	beq.n	8005c56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f918 	bl	8005e6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fe ffcf 	bl	8004bea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005c54:	e014      	b.n	8005c80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f957 	bl	8005f0a <USBD_CtlSendStatus>
      break;
 8005c5c:	e010      	b.n	8005c80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f953 	bl	8005f0a <USBD_CtlSendStatus>
      break;
 8005c64:	e00c      	b.n	8005c80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f900 	bl	8005e6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c6e:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <USBD_SetConfig+0x150>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fe ffb8 	bl	8004bea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7e:	bf00      	nop
  }

  return ret;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000078 	.word	0x20000078

08005c90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	88db      	ldrh	r3, [r3, #6]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d004      	beq.n	8005cac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8e2 	bl	8005e6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005caa:	e023      	b.n	8005cf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	dc02      	bgt.n	8005cbe <USBD_GetConfig+0x2e>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dc03      	bgt.n	8005cc4 <USBD_GetConfig+0x34>
 8005cbc:	e015      	b.n	8005cea <USBD_GetConfig+0x5a>
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d00b      	beq.n	8005cda <USBD_GetConfig+0x4a>
 8005cc2:	e012      	b.n	8005cea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f8dc 	bl	8005e90 <USBD_CtlSendData>
        break;
 8005cd8:	e00c      	b.n	8005cf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8d4 	bl	8005e90 <USBD_CtlSendData>
        break;
 8005ce8:	e004      	b.n	8005cf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8be 	bl	8005e6e <USBD_CtlError>
        break;
 8005cf2:	bf00      	nop
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d81e      	bhi.n	8005d52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	88db      	ldrh	r3, [r3, #6]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d004      	beq.n	8005d26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8a5 	bl	8005e6e <USBD_CtlError>
        break;
 8005d24:	e01a      	b.n	8005d5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f043 0202 	orr.w	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	330c      	adds	r3, #12
 8005d46:	2202      	movs	r2, #2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8a0 	bl	8005e90 <USBD_CtlSendData>
      break;
 8005d50:	e004      	b.n	8005d5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f88a 	bl	8005e6e <USBD_CtlError>
      break;
 8005d5a:	bf00      	nop
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8c3 	bl	8005f0a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005d84:	e013      	b.n	8005dae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	885b      	ldrh	r3, [r3, #2]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d10b      	bne.n	8005da6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	889b      	ldrh	r3, [r3, #4]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f8b3 	bl	8005f0a <USBD_CtlSendStatus>
}
 8005da4:	e003      	b.n	8005dae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f860 	bl	8005e6e <USBD_CtlError>
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d80b      	bhi.n	8005de6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	885b      	ldrh	r3, [r3, #2]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10c      	bne.n	8005df0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f893 	bl	8005f0a <USBD_CtlSendStatus>
      }
      break;
 8005de4:	e004      	b.n	8005df0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f840 	bl	8005e6e <USBD_CtlError>
      break;
 8005dee:	e000      	b.n	8005df2 <USBD_ClrFeature+0x3c>
      break;
 8005df0:	bf00      	nop
  }
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff fa16 	bl	8005256 <SWAPBYTE>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff fa09 	bl	8005256 <SWAPBYTE>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff f9fc 	bl	8005256 <SWAPBYTE>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	80da      	strh	r2, [r3, #6]
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e78:	2180      	movs	r1, #128	@ 0x80
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f982 	bl	8006184 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e80:	2100      	movs	r1, #0
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f97e 	bl	8006184 <USBD_LL_StallEP>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f9ed 	bl	8006296 <USBD_LL_Transmit>

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f9dc 	bl	8006296 <USBD_LL_Transmit>

  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f9ec 	bl	80062d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2204      	movs	r2, #4
 8005f16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2100      	movs	r1, #0
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9b8 	bl	8006296 <USBD_LL_Transmit>

  return USBD_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9c6 	bl	80062d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f7fe fe56 	bl	8004c1e <USBD_LL_SetupStage>
}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f7fe fe90 	bl	8004cc8 <USBD_LL_DataOutStage>
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	3320      	adds	r3, #32
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f7fe ff29 	bl	8004e2e <USBD_LL_DataInStage>
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f863 	bl	80050be <USBD_LL_SOF>
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	79db      	ldrb	r3, [r3, #7]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006014:	2300      	movs	r3, #0
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e008      	b.n	800602c <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	79db      	ldrb	r3, [r3, #7]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d102      	bne.n	8006028 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	e001      	b.n	800602c <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006028:	f7fa fb82 	bl	8000730 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fffd 	bl	8005036 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe ffa5 	bl	8004f92 <USBD_LL_Reset>
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fff9 	bl	8005056 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006076:	f043 0301 	orr.w	r3, r3, #1
 800607a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7adb      	ldrb	r3, [r3, #11]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006084:	4b04      	ldr	r3, [pc, #16]	@ (8006098 <HAL_PCD_SuspendCallback+0x48>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	4a03      	ldr	r2, [pc, #12]	@ (8006098 <HAL_PCD_SuspendCallback+0x48>)
 800608a:	f043 0306 	orr.w	r3, r3, #6
 800608e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	e000ed00 	.word	0xe000ed00

0800609c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe ffef 	bl	800508e <USBD_LL_Resume>
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	4611      	mov	r1, r2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff f847 	bl	8005162 <USBD_LL_IsoOUTIncomplete>
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f803 	bl	80050fe <USBD_LL_IsoINIncomplete>
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff f859 	bl	80051c6 <USBD_LL_DevConnected>
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff f856 	bl	80051dc <USBD_LL_DevDisconnected>
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4603      	mov	r3, r0
 8006148:	70fb      	strb	r3, [r7, #3]
 800614a:	460b      	mov	r3, r1
 800614c:	70bb      	strb	r3, [r7, #2]
 800614e:	4613      	mov	r3, r2
 8006150:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006160:	78bb      	ldrb	r3, [r7, #2]
 8006162:	883a      	ldrh	r2, [r7, #0]
 8006164:	78f9      	ldrb	r1, [r7, #3]
 8006166:	f7fb fcc0 	bl	8001aea <HAL_PCD_EP_Open>
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 f921 	bl	80063b8 <USBD_Get_USB_Status>
 8006176:	4603      	mov	r3, r0
 8006178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800617a:	7bbb      	ldrb	r3, [r7, #14]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fb fd80 	bl	8001ca8 <HAL_PCD_EP_SetStall>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 f902 	bl	80063b8 <USBD_Get_USB_Status>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fb fdc4 	bl	8001d6e <HAL_PCD_EP_ClrStall>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f8e3 	bl	80063b8 <USBD_Get_USB_Status>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006212:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006218:	2b00      	cmp	r3, #0
 800621a:	da0b      	bge.n	8006234 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	3316      	adds	r3, #22
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	e00b      	b.n	800624c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800624a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006272:	78fa      	ldrb	r2, [r7, #3]
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7fb fc13 	bl	8001aa2 <HAL_PCD_SetAddress>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f898 	bl	80063b8 <USBD_Get_USB_Status>
 8006288:	4603      	mov	r3, r0
 800628a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800628c:	7bbb      	ldrb	r3, [r7, #14]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	460b      	mov	r3, r1
 80062a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80062b4:	7af9      	ldrb	r1, [r7, #11]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	f7fb fcbb 	bl	8001c34 <HAL_PCD_EP_Transmit>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f877 	bl	80063b8 <USBD_Get_USB_Status>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	460b      	mov	r3, r1
 80062e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80062f6:	7af9      	ldrb	r1, [r7, #11]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	f7fb fc5f 	bl	8001bbe <HAL_PCD_EP_Receive>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f856 	bl	80063b8 <USBD_Get_USB_Status>
 800630c:	4603      	mov	r3, r0
 800630e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006310:	7dbb      	ldrb	r3, [r7, #22]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_PCDEx_LPM_Callback+0x18>
 800632e:	2b01      	cmp	r3, #1
 8006330:	d01f      	beq.n	8006372 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8006332:	e03b      	b.n	80063ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	7adb      	ldrb	r3, [r3, #11]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800633c:	f7fa f98c 	bl	8000658 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006340:	4b1c      	ldr	r3, [pc, #112]	@ (80063b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8006346:	f023 0306 	bic.w	r3, r3, #6
 800634a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fe8f 	bl	800508e <USBD_LL_Resume>
    break;
 8006370:	e01c      	b.n	80063ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fe60 	bl	8005056 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7adb      	ldrb	r3, [r3, #11]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80063a4:	f043 0306 	orr.w	r3, r3, #6
 80063a8:	6113      	str	r3, [r2, #16]
    break;
 80063aa:	bf00      	nop
}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	e000ed00 	.word	0xe000ed00

080063b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d817      	bhi.n	80063fc <USBD_Get_USB_Status+0x44>
 80063cc:	a201      	add	r2, pc, #4	@ (adr r2, 80063d4 <USBD_Get_USB_Status+0x1c>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063eb 	.word	0x080063eb
 80063dc:	080063f1 	.word	0x080063f1
 80063e0:	080063f7 	.word	0x080063f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
    break;
 80063e8:	e00b      	b.n	8006402 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063ea:	2303      	movs	r3, #3
 80063ec:	73fb      	strb	r3, [r7, #15]
    break;
 80063ee:	e008      	b.n	8006402 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
    break;
 80063f4:	e005      	b.n	8006402 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063f6:	2303      	movs	r3, #3
 80063f8:	73fb      	strb	r3, [r7, #15]
    break;
 80063fa:	e002      	b.n	8006402 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006400:	bf00      	nop
  }
  return usb_status;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <memset>:
 8006410:	4402      	add	r2, r0
 8006412:	4603      	mov	r3, r0
 8006414:	4293      	cmp	r3, r2
 8006416:	d100      	bne.n	800641a <memset+0xa>
 8006418:	4770      	bx	lr
 800641a:	f803 1b01 	strb.w	r1, [r3], #1
 800641e:	e7f9      	b.n	8006414 <memset+0x4>

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4d0d      	ldr	r5, [pc, #52]	@ (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	@ (800645c <__libc_init_array+0x3c>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2600      	movs	r6, #0
 800642c:	42a6      	cmp	r6, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4d0b      	ldr	r5, [pc, #44]	@ (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	@ (8006464 <__libc_init_array+0x44>)
 8006434:	f000 f818 	bl	8006468 <_init>
 8006438:	1b64      	subs	r4, r4, r5
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2600      	movs	r6, #0
 800643e:	42a6      	cmp	r6, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f855 3b04 	ldr.w	r3, [r5], #4
 8006448:	4798      	blx	r3
 800644a:	3601      	adds	r6, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006452:	4798      	blx	r3
 8006454:	3601      	adds	r6, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	080064a0 	.word	0x080064a0
 800645c:	080064a0 	.word	0x080064a0
 8006460:	080064a0 	.word	0x080064a0
 8006464:	080064a4 	.word	0x080064a4

08006468 <_init>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr

08006474 <_fini>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr
